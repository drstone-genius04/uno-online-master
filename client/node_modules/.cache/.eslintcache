[{"C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\index.js":"1","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\App.js":"2","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\components\\Homepage.js":"3","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\components\\Game.js":"4","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\components\\Spinner.js":"5","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\utils\\randomCodeGenerator.js":"6","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\utils\\packOfCards.js":"7","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\utils\\shuffleArray.js":"8"},{"size":320,"mtime":1659539599939,"results":"9","hashOfConfig":"10"},{"size":356,"mtime":1659539599561,"results":"11","hashOfConfig":"10"},{"size":1147,"mtime":1659539599920,"results":"12","hashOfConfig":"10"},{"size":87479,"mtime":1659539688327,"results":"13","hashOfConfig":"10"},{"size":152,"mtime":1659539599926,"results":"14","hashOfConfig":"10"},{"size":368,"mtime":1659539599959,"results":"15","hashOfConfig":"10"},{"size":758,"mtime":1659539599948,"results":"16","hashOfConfig":"10"},{"size":264,"mtime":1659539599964,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mgwd3t",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\index.js",[],"C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\App.js",[],"C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\components\\Homepage.js",["37"],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport randomCodeGenerator from '../utils/randomCodeGenerator'\r\n\r\nconst Homepage = () => {\r\n    const [roomCode, setRoomCode] = useState('')\r\n\r\n    return (\r\n        <div className='Homepage'>\r\n            <div className='homepage-menu'>\r\n                <img src={require('../assets/logo.png').default} width='200px' />\r\n                <div className='homepage-form'>\r\n                    <div className='homepage-join'>\r\n                        <input type='text' placeholder='Game Code' onChange={(event) => setRoomCode(event.target.value)} />\r\n                        <Link to={`/play?roomCode=${roomCode}`}><button className=\"game-button green\">JOIN GAME</button></Link>\r\n                    </div>\r\n                    <h1>OR</h1>\r\n                    <div className='homepage-create'>\r\n                        <Link to={`/play?roomCode=${randomCodeGenerator(5)}`}><button className=\"game-button orange\">CREATE GAME</button></Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage\r\n","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\components\\Game.js",["38","39","40","41","42","43","44","45","46","47","48","49","50","51"],"import React, { useEffect, useState } from 'react'\r\nimport PACK_OF_CARDS from '../utils/packOfCards'\r\nimport shuffleArray from '../utils/shuffleArray'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Spinner from './Spinner'\r\nimport useSound from 'use-sound'\r\n\r\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\r\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\r\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\r\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\r\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\r\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\r\n\r\n//NUMBER CODES FOR ACTION CARDS\r\n//SKIP - 404\r\n//DRAW 2 - 252\r\n//WILD - 300\r\n//DRAW 4 WILD - 600\r\n\r\nlet socket\r\n// const ENDPOINT = 'http://localhost:5000'\r\nconst ENDPOINT = 'http://localhost:5000'\r\n\r\nconst Game = (props) => {\r\n    const data = queryString.parse(props.location.search)\r\n\r\n    //initialize socket state\r\n    const [room, setRoom] = useState(data.roomCode)\r\n    const [roomFull, setRoomFull] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        //cleanup on component unmount\r\n        return function cleanup() {\r\n            socket.emit('disconnect')\r\n            //shut down connnection instance\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n    //initialize game state\r\n    const [gameOver, setGameOver] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [turn, setTurn] = useState('')\r\n    const [player1Deck, setPlayer1Deck] = useState([])\r\n    const [player2Deck, setPlayer2Deck] = useState([])\r\n    const [currentColor, setCurrentColor] = useState('')\r\n    const [currentNumber, setCurrentNumber] = useState('')\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\r\n    const [drawCardPile, setDrawCardPile] = useState([])\r\n\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [isSoundMuted, setSoundMuted] = useState(false)\r\n    const [isMusicMuted, setMusicMuted] = useState(true)\r\n\r\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [playShufflingSound] = useSound(shufflingSound)\r\n    const [playSkipCardSound] = useSound(skipCardSound)\r\n    const [playDraw2CardSound] = useSound(draw2CardSound)\r\n    const [playWildCardSound] = useSound(wildCardSound)\r\n    const [playDraw4CardSound] = useSound(draw4CardSound)\r\n    const [playGameOverSound] = useSound(gameOverSound)\r\n\r\n    //runs once on component mount\r\n    useEffect(() => {\r\n        //shuffle PACK_OF_CARDS array\r\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\r\n\r\n        //extract first 7 elements to player1Deck\r\n        const player1Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract first 7 elements to player2Deck\r\n        const player2Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract random card from shuffledCards and check if its not an action card\r\n        let startingCardIndex\r\n        while(true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94)\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\r\n            shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\r\n            shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\r\n            shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\r\n            shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        //extract the card from that startingCardIndex into the playedCardsPile\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\r\n\r\n        //store all remaining cards into drawCardPile\r\n        const drawCardPile = shuffledCards\r\n\r\n        //send initial state to server\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile]\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            gameOver && setGameOver(gameOver)\r\n            gameOver===true && playGameOverSound()\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [])\r\n\r\n    //some util functions\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1\r\n    }\r\n    \r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : ''\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body')\r\n        if(isChatBoxHidden) {\r\n            chatBody.style.display = 'block'\r\n            setChatBoxHidden(false)\r\n        }\r\n        else {\r\n            chatBody.style.display = 'none'\r\n            setChatBoxHidden(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage= (event) => {\r\n        event.preventDefault()\r\n        if(message) {\r\n            socket.emit('sendMessage', { message: message }, () => {\r\n                setMessage('')\r\n            })\r\n        }\r\n    }\r\n\r\n    //driver functions\r\n    const onCardPlayedHandler = (played_card) => {\r\n        //extract player who played the card\r\n        const cardPlayedBy = turn\r\n        switch(played_card) {\r\n            //if card played was a number card\r\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\r\n                //extract number and color of played card\r\n                const numberOfPlayedCard = played_card.charAt(0)\r\n                const colorOfPlayedCard = played_card.charAt(1)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match\r\n                else if(currentNumber === numberOfPlayedCard) {\r\n                    console.log('numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a skip card\r\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(4)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if skip card played on skip card\r\n                else if(currentNumber === 404) {\r\n                    console.log('Numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw 2 card\r\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(2)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if draw 2 card played on draw 2 card\r\n                else if(currentNumber === 252) {                        \r\n                    console.log('number matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a wild card\r\n            case 'W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1)\r\n                        updatedPlayer1Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1)\r\n                        updatedPlayer2Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw four wild card\r\n            case 'D4W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1X)\r\n                        updatedPlayer1Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    !isSoundMuted && playDraw4CardSound()\r\n                    //send new state to server\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    })\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1X)\r\n                        updatedPlayer2Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    \r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        //check who drew the card and return new state accordingly\r\n        if(cardDrawnBy === 'Player 1') {\r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img src={require('../assets/logo.png').default} />\r\n                    <h1>Game Code: {room}</h1>\r\n                    <span>\r\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\r\n                        <button className='game-button green' onClick={() => {\r\n                            if(isMusicMuted)\r\n                                playBBgMusic()\r\n                            else\r\n                                pause()\r\n                            setMusicMuted(!isMusicMuted)\r\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\r\n                    </span>\r\n                </div>\r\n\r\n                {/* PLAYER LEFT MESSAGES */}\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\r\n                    <div>\r\n                        {/* PLAYER 1 VIEW */}\r\n                        {currentUser === 'Player 1' && <>    \r\n                        <div className='player2Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 2' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player1\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n\r\n                        {/* PLAYER 2 VIEW */}\r\n                        {currentUser === 'Player 2' && <>\r\n                        <div className='player1Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 1' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player2\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n                    </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <a href='/'><button className=\"game-button red\">QUIT</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\components\\Spinner.js",[],"C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\utils\\randomCodeGenerator.js",[],"C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\utils\\packOfCards.js",["52"],"//pack of 108 cards (_ = reverse)\r\nexport default [\r\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\r\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\r\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\r\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\r\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W'\r\n]","C:\\Users\\allan\\Desktop\\uno-online\\client\\src\\utils\\shuffleArray.js",[],{"ruleId":"53","severity":1,"message":"54","line":11,"column":17,"nodeType":"55","endLine":11,"endColumn":82},{"ruleId":"56","severity":1,"message":"57","line":32,"column":18,"nodeType":"58","messageId":"59","endLine":32,"endColumn":25},{"ruleId":"60","severity":1,"message":"61","line":59,"column":8,"nodeType":"62","endLine":59,"endColumn":10,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":171,"column":8,"nodeType":"62","endLine":171,"endColumn":10,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":207,"column":9,"nodeType":"68","messageId":"69","endLine":1013,"endColumn":10},{"ruleId":"70","severity":1,"message":"71","line":893,"column":25,"nodeType":"72","messageId":"73","endLine":1011,"endColumn":14},{"ruleId":"53","severity":1,"message":"54","line":1223,"column":21,"nodeType":"55","endLine":1223,"endColumn":72},{"ruleId":"53","severity":1,"message":"54","line":1250,"column":33,"nodeType":"55","endLine":1255,"endColumn":39},{"ruleId":"53","severity":1,"message":"54","line":1263,"column":29,"nodeType":"55","endLine":1266,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":1276,"column":33,"nodeType":"55","endLine":1281,"endColumn":39},{"ruleId":"74","severity":1,"message":"75","line":1295,"column":59,"nodeType":"76","messageId":"77","endLine":1295,"endColumn":61},{"ruleId":"53","severity":1,"message":"54","line":1314,"column":33,"nodeType":"55","endLine":1319,"endColumn":39},{"ruleId":"53","severity":1,"message":"54","line":1327,"column":29,"nodeType":"55","endLine":1330,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":1340,"column":33,"nodeType":"55","endLine":1345,"endColumn":39},{"ruleId":"74","severity":1,"message":"75","line":1359,"column":59,"nodeType":"76","messageId":"77","endLine":1359,"endColumn":61},{"ruleId":"78","severity":1,"message":"79","line":2,"column":1,"nodeType":"80","endLine":8,"endColumn":2},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'setRoom' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'room'. Either include it or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'playGameOverSound'. Either include it or remove the dependency array.",["82"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [room]",{"range":"87","text":"88"},"Update the dependencies array to be: [playGameOverSound]",{"range":"89","text":"90"},[2060,2062],"[room]",[7104,7106],"[playGameOverSound]"]