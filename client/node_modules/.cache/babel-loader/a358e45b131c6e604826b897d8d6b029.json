{"ast":null,"code":"import _toConsumableArray from\"C:/Users/allan/Desktop/uno-online/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/allan/Desktop/uno-online/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import PACK_OF_CARDS from'../utils/packOfCards';import shuffleArray from'../utils/shuffleArray';import io from'socket.io-client';import queryString from'query-string';import Spinner from'./Spinner';import useSound from'use-sound';import bgMusic from'../assets/sounds/game-bg-music.mp3';import unoSound from'../assets/sounds/uno-sound.mp3';import shufflingSound from'../assets/sounds/shuffling-cards-1.mp3';import skipCardSound from'../assets/sounds/skip-sound.mp3';import draw2CardSound from'../assets/sounds/draw2-sound.mp3';import wildCardSound from'../assets/sounds/wild-sound.mp3';import draw4CardSound from'../assets/sounds/draw4-sound.mp3';import gameOverSound from'../assets/sounds/game-over-sound.mp3';//NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var socket;// const ENDPOINT = 'http://localhost:5000'\nvar ENDPOINT='https://uno-game-allan.herokuapp.com/';var Game=function Game(props){var data=queryString.parse(props.location.search);//initialize socket state\nvar _useState=useState(data.roomCode),_useState2=_slicedToArray(_useState,2),room=_useState2[0],setRoom=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),roomFull=_useState4[0],setRoomFull=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),users=_useState6[0],setUsers=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),currentUser=_useState8[0],setCurrentUser=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),message=_useState10[0],setMessage=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),messages=_useState12[0],setMessages=_useState12[1];useEffect(function(){var connectionOptions={\"forceNew\":true,\"reconnectionAttempts\":\"Infinity\",\"timeout\":10000,\"transports\":[\"websocket\"]};socket=io.connect(ENDPOINT,connectionOptions);socket.emit('join',{room:room},function(error){if(error)setRoomFull(true);});//cleanup on component unmount\nreturn function cleanup(){socket.emit('disconnect');//shut down connnection instance\nsocket.off();};},[]);//initialize game state\nvar _useState13=useState(true),_useState14=_slicedToArray(_useState13,2),gameOver=_useState14[0],setGameOver=_useState14[1];var _useState15=useState(''),_useState16=_slicedToArray(_useState15,2),winner=_useState16[0],setWinner=_useState16[1];var _useState17=useState(''),_useState18=_slicedToArray(_useState17,2),turn=_useState18[0],setTurn=_useState18[1];var _useState19=useState([]),_useState20=_slicedToArray(_useState19,2),player1Deck=_useState20[0],setPlayer1Deck=_useState20[1];var _useState21=useState([]),_useState22=_slicedToArray(_useState21,2),player2Deck=_useState22[0],setPlayer2Deck=_useState22[1];var _useState23=useState(''),_useState24=_slicedToArray(_useState23,2),currentColor=_useState24[0],setCurrentColor=_useState24[1];var _useState25=useState(''),_useState26=_slicedToArray(_useState25,2),currentNumber=_useState26[0],setCurrentNumber=_useState26[1];var _useState27=useState([]),_useState28=_slicedToArray(_useState27,2),playedCardsPile=_useState28[0],setPlayedCardsPile=_useState28[1];var _useState29=useState([]),_useState30=_slicedToArray(_useState29,2),drawCardPile=_useState30[0],setDrawCardPile=_useState30[1];var _useState31=useState(true),_useState32=_slicedToArray(_useState31,2),isChatBoxHidden=_useState32[0],setChatBoxHidden=_useState32[1];var _useState33=useState(false),_useState34=_slicedToArray(_useState33,2),isUnoButtonPressed=_useState34[0],setUnoButtonPressed=_useState34[1];var _useState35=useState(false),_useState36=_slicedToArray(_useState35,2),isSoundMuted=_useState36[0],setSoundMuted=_useState36[1];var _useState37=useState(true),_useState38=_slicedToArray(_useState37,2),isMusicMuted=_useState38[0],setMusicMuted=_useState38[1];var _useSound=useSound(bgMusic,{loop:true}),_useSound2=_slicedToArray(_useSound,2),playBBgMusic=_useSound2[0],pause=_useSound2[1].pause;var _useSound3=useSound(unoSound),_useSound4=_slicedToArray(_useSound3,1),playUnoSound=_useSound4[0];var _useSound5=useSound(shufflingSound),_useSound6=_slicedToArray(_useSound5,1),playShufflingSound=_useSound6[0];var _useSound7=useSound(skipCardSound),_useSound8=_slicedToArray(_useSound7,1),playSkipCardSound=_useSound8[0];var _useSound9=useSound(draw2CardSound),_useSound10=_slicedToArray(_useSound9,1),playDraw2CardSound=_useSound10[0];var _useSound11=useSound(wildCardSound),_useSound12=_slicedToArray(_useSound11,1),playWildCardSound=_useSound12[0];var _useSound13=useSound(draw4CardSound),_useSound14=_slicedToArray(_useSound13,1),playDraw4CardSound=_useSound14[0];var _useSound15=useSound(gameOverSound),_useSound16=_slicedToArray(_useSound15,1),playGameOverSound=_useSound16[0];//runs once on component mount\nuseEffect(function(){//shuffle PACK_OF_CARDS array\nvar shuffledCards=shuffleArray(PACK_OF_CARDS);//extract first 7 elements to player1Deck\nvar player1Deck=shuffledCards.splice(0,7);//extract first 7 elements to player2Deck\nvar player2Deck=shuffledCards.splice(0,7);//extract random card from shuffledCards and check if its not an action card\nvar startingCardIndex;while(true){startingCardIndex=Math.floor(Math.random()*94);if(shuffledCards[startingCardIndex]==='skipR'||shuffledCards[startingCardIndex]==='_R'||shuffledCards[startingCardIndex]==='D2R'||shuffledCards[startingCardIndex]==='skipG'||shuffledCards[startingCardIndex]==='_G'||shuffledCards[startingCardIndex]==='D2G'||shuffledCards[startingCardIndex]==='skipB'||shuffledCards[startingCardIndex]==='_B'||shuffledCards[startingCardIndex]==='D2B'||shuffledCards[startingCardIndex]==='skipY'||shuffledCards[startingCardIndex]==='_Y'||shuffledCards[startingCardIndex]==='D2Y'||shuffledCards[startingCardIndex]==='W'||shuffledCards[startingCardIndex]==='D4W'){continue;}else break;}//extract the card from that startingCardIndex into the playedCardsPile\nvar playedCardsPile=shuffledCards.splice(startingCardIndex,1);//store all remaining cards into drawCardPile\nvar drawCardPile=shuffledCards;//send initial state to server\nsocket.emit('initGameState',{gameOver:false,turn:'Player 1',player1Deck:_toConsumableArray(player1Deck),player2Deck:_toConsumableArray(player2Deck),currentColor:playedCardsPile[0].charAt(1),currentNumber:playedCardsPile[0].charAt(0),playedCardsPile:_toConsumableArray(playedCardsPile),drawCardPile:_toConsumableArray(drawCardPile)});},[]);useEffect(function(){socket.on('initGameState',function(_ref){var gameOver=_ref.gameOver,turn=_ref.turn,player1Deck=_ref.player1Deck,player2Deck=_ref.player2Deck,currentColor=_ref.currentColor,currentNumber=_ref.currentNumber,playedCardsPile=_ref.playedCardsPile,drawCardPile=_ref.drawCardPile;setGameOver(gameOver);setTurn(turn);setPlayer1Deck(player1Deck);setPlayer2Deck(player2Deck);setCurrentColor(currentColor);setCurrentNumber(currentNumber);setPlayedCardsPile(playedCardsPile);setDrawCardPile(drawCardPile);});socket.on('updateGameState',function(_ref2){var gameOver=_ref2.gameOver,winner=_ref2.winner,turn=_ref2.turn,player1Deck=_ref2.player1Deck,player2Deck=_ref2.player2Deck,currentColor=_ref2.currentColor,currentNumber=_ref2.currentNumber,playedCardsPile=_ref2.playedCardsPile,drawCardPile=_ref2.drawCardPile;gameOver&&setGameOver(gameOver);gameOver===true&&playGameOverSound();winner&&setWinner(winner);turn&&setTurn(turn);player1Deck&&setPlayer1Deck(player1Deck);player2Deck&&setPlayer2Deck(player2Deck);currentColor&&setCurrentColor(currentColor);currentNumber&&setCurrentNumber(currentNumber);playedCardsPile&&setPlayedCardsPile(playedCardsPile);drawCardPile&&setDrawCardPile(drawCardPile);setUnoButtonPressed(false);});socket.on(\"roomData\",function(_ref3){var users=_ref3.users;setUsers(users);});socket.on('currentUserData',function(_ref4){var name=_ref4.name;setCurrentUser(name);});socket.on('message',function(message){setMessages(function(messages){return[].concat(_toConsumableArray(messages),[message]);});var chatBody=document.querySelector('.chat-body');chatBody.scrollTop=chatBody.scrollHeight;});},[]);//some util functions\nvar checkGameOver=function checkGameOver(arr){return arr.length===1;};var checkWinner=function checkWinner(arr,player){return arr.length===1?player:'';};var toggleChatBox=function toggleChatBox(){var chatBody=document.querySelector('.chat-body');if(isChatBoxHidden){chatBody.style.display='block';setChatBoxHidden(false);}else{chatBody.style.display='none';setChatBoxHidden(true);}};var sendMessage=function sendMessage(event){event.preventDefault();if(message){socket.emit('sendMessage',{message:message},function(){setMessage('');});}};//driver functions\nvar onCardPlayedHandler=function onCardPlayedHandler(played_card){//extract player who played the card\nvar cardPlayedBy=turn;switch(played_card){//if card played was a number card\ncase'0R':case'1R':case'2R':case'3R':case'4R':case'5R':case'6R':case'7R':case'8R':case'9R':case'_R':case'0G':case'1G':case'2G':case'3G':case'4G':case'5G':case'6G':case'7G':case'8G':case'9G':case'_G':case'0B':case'1B':case'2B':case'3B':case'4B':case'5B':case'6B':case'7B':case'8B':case'9B':case'_B':case'0Y':case'1Y':case'2Y':case'3Y':case'4Y':case'5Y':case'6Y':case'7Y':case'8Y':case'9Y':case'_Y':{//extract number and color of played card\nvar numberOfPlayedCard=played_card.charAt(0);var colorOfPlayedCard=played_card.charAt(1);//check for color match\nif(currentColor===colorOfPlayedCard){console.log('colors matched!');//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//remove the played card from player1's deck and add it to playedCardsPile (immutably)\n//then update turn, currentColor and currentNumber\nvar removeIndex=player1Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar copiedDrawCardPileArray=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar drawCard1=copiedDrawCardPileArray.pop();var drawCard2=copiedDrawCardPileArray.pop();var updatedPlayer1Deck=[].concat(_toConsumableArray(player1Deck.slice(0,removeIndex)),_toConsumableArray(player1Deck.slice(removeIndex+1)));updatedPlayer1Deck.push(drawCard1);updatedPlayer1Deck.push(drawCard2);!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(updatedPlayer1Deck),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard,drawCardPile:_toConsumableArray(copiedDrawCardPileArray)});}else{!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,removeIndex)),_toConsumableArray(player1Deck.slice(removeIndex+1))),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard});}}else{//remove the played card from player2's deck and add it to playedCardsPile (immutably)\n//then update turn, currentColor and currentNumber\nvar _removeIndex=player2Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard=_copiedDrawCardPileArray.pop();var _drawCard2=_copiedDrawCardPileArray.pop();var updatedPlayer2Deck=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex)),_toConsumableArray(player2Deck.slice(_removeIndex+1)));updatedPlayer2Deck.push(_drawCard);updatedPlayer2Deck.push(_drawCard2);!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(updatedPlayer2Deck),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray)});}else{!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex)),_toConsumableArray(player2Deck.slice(_removeIndex+1))),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard});}}}//check for number match\nelse if(currentNumber===numberOfPlayedCard){console.log('numbers matched!');//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//remove the played card from player1's deck and add it to playedCardsPile (immutably)\n//then update turn, currentColor and currentNumber\nvar _removeIndex2=player1Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray2=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard3=_copiedDrawCardPileArray2.pop();var _drawCard4=_copiedDrawCardPileArray2.pop();var _updatedPlayer1Deck=[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex2)),_toConsumableArray(player1Deck.slice(_removeIndex2+1)));_updatedPlayer1Deck.push(_drawCard3);_updatedPlayer1Deck.push(_drawCard4);!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(_updatedPlayer1Deck),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray2)});}else{!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex2)),_toConsumableArray(player1Deck.slice(_removeIndex2+1))),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard});}}else{//remove the played card from player2's deck and add it to playedCardsPile (immutably)\n//then update turn, currentColor and currentNumber\nvar _removeIndex3=player2Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray3=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard5=_copiedDrawCardPileArray3.pop();var _drawCard6=_copiedDrawCardPileArray3.pop();var _updatedPlayer2Deck=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex3)),_toConsumableArray(player2Deck.slice(_removeIndex3+1)));_updatedPlayer2Deck.push(_drawCard5);_updatedPlayer2Deck.push(_drawCard6);!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(_updatedPlayer2Deck),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray3)});}else{!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex3)),_toConsumableArray(player2Deck.slice(_removeIndex3+1))),currentColor:colorOfPlayedCard,currentNumber:numberOfPlayedCard});}}}//if no color or number match, invalid move - do not update state\nelse{alert('Invalid Move!');}break;}//if card played was a skip card\ncase'skipR':case'skipG':case'skipB':case'skipY':{//extract color of played skip card\nvar _colorOfPlayedCard=played_card.charAt(4);//check for color match\nif(currentColor===_colorOfPlayedCard){console.log('colors matched!');//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//remove the played card from player1's deck and add it to playedCardsPile (immutably)\n//then update currentColor and currentNumber\nvar _removeIndex4=player1Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray4=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard7=_copiedDrawCardPileArray4.pop();var _drawCard8=_copiedDrawCardPileArray4.pop();var _updatedPlayer1Deck2=[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex4)),_toConsumableArray(player1Deck.slice(_removeIndex4+1)));_updatedPlayer1Deck2.push(_drawCard7);_updatedPlayer1Deck2.push(_drawCard8);!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(_updatedPlayer1Deck2),currentColor:_colorOfPlayedCard,currentNumber:404,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray4)});}else{!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex4)),_toConsumableArray(player1Deck.slice(_removeIndex4+1))),currentColor:_colorOfPlayedCard,currentNumber:404});}}else{//remove the played card from player2's deck and add it to playedCardsPile (immutably)\n//then update currentColor and currentNumber\nvar _removeIndex5=player2Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray5=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard9=_copiedDrawCardPileArray5.pop();var _drawCard10=_copiedDrawCardPileArray5.pop();var _updatedPlayer2Deck2=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex5)),_toConsumableArray(player2Deck.slice(_removeIndex5+1)));_updatedPlayer2Deck2.push(_drawCard9);_updatedPlayer2Deck2.push(_drawCard10);!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(_updatedPlayer2Deck2),currentColor:_colorOfPlayedCard,currentNumber:404,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray5)});}else{!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex5)),_toConsumableArray(player2Deck.slice(_removeIndex5+1))),currentColor:_colorOfPlayedCard,currentNumber:404});}}}//check for number match - if skip card played on skip card\nelse if(currentNumber===404){console.log('Numbers matched!');//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//remove the played card from player1's deck and add it to playedCardsPile (immutably)\n//then update currentColor and currentNumber - turn will remain same\nvar _removeIndex6=player1Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray6=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard11=_copiedDrawCardPileArray6.pop();var _drawCard12=_copiedDrawCardPileArray6.pop();var _updatedPlayer1Deck3=[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex6)),_toConsumableArray(player1Deck.slice(_removeIndex6+1)));_updatedPlayer1Deck3.push(_drawCard11);_updatedPlayer1Deck3.push(_drawCard12);!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(_updatedPlayer1Deck3),currentColor:_colorOfPlayedCard,currentNumber:404,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray6)});}else{!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex6)),_toConsumableArray(player1Deck.slice(_removeIndex6+1))),currentColor:_colorOfPlayedCard,currentNumber:404});}}else{//remove the played card from player2's deck and add it to playedCardsPile (immutably)\n//then update currentColor and currentNumber - turn will remain same\nvar _removeIndex7=player2Deck.indexOf(played_card);//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray7=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard13=_copiedDrawCardPileArray7.pop();var _drawCard14=_copiedDrawCardPileArray7.pop();var _updatedPlayer2Deck3=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex7)),_toConsumableArray(player2Deck.slice(_removeIndex7+1)));_updatedPlayer2Deck3.push(_drawCard13);_updatedPlayer2Deck3.push(_drawCard14);!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(_updatedPlayer2Deck3),currentColor:_colorOfPlayedCard,currentNumber:404,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray7)});}else{!isSoundMuted&&playSkipCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex7)),_toConsumableArray(player2Deck.slice(_removeIndex7+1))),currentColor:_colorOfPlayedCard,currentNumber:404});}}}//if no color or number match, invalid move - do not update state\nelse{alert('Invalid Move!');}break;}//if card played was a draw 2 card\ncase'D2R':case'D2G':case'D2B':case'D2Y':{//extract color of played skip card\nvar _colorOfPlayedCard2=played_card.charAt(2);//check for color match\nif(currentColor===_colorOfPlayedCard2){console.log('colors matched!');//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//remove the played card from player1's deck and add it to playedCardsPile (immutably)\n//remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n//then update currentColor and currentNumber - turn will remain same\nvar _removeIndex8=player1Deck.indexOf(played_card);//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray8=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard15=_copiedDrawCardPileArray8.pop();var _drawCard16=_copiedDrawCardPileArray8.pop();//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//pull out last two elements from drawCardPile\nvar drawCard1X=_copiedDrawCardPileArray8.pop();var drawCard2X=_copiedDrawCardPileArray8.pop();var _updatedPlayer1Deck4=[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex8)),_toConsumableArray(player1Deck.slice(_removeIndex8+1)));_updatedPlayer1Deck4.push(drawCard1X);_updatedPlayer1Deck4.push(drawCard2X);!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(_updatedPlayer1Deck4),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard15,_drawCard16],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray8)});}else{!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex8)),_toConsumableArray(player1Deck.slice(_removeIndex8+1))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard15,_drawCard16],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray8)});}}else{//remove the played card from player2's deck and add it to playedCardsPile (immutably)\n//remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n//then update currentColor and currentNumber - turn will remain same\nvar _removeIndex9=player2Deck.indexOf(played_card);//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray9=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard17=_copiedDrawCardPileArray9.pop();var _drawCard18=_copiedDrawCardPileArray9.pop();//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//pull out last two elements from drawCardPile\nvar _drawCard1X=_copiedDrawCardPileArray9.pop();var _drawCard2X=_copiedDrawCardPileArray9.pop();var _updatedPlayer2Deck4=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex9)),_toConsumableArray(player2Deck.slice(_removeIndex9+1)));_updatedPlayer2Deck4.push(_drawCard1X);_updatedPlayer2Deck4.push(_drawCard2X);!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(_updatedPlayer2Deck4),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard17,_drawCard18],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray9)});}else{!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex9)),_toConsumableArray(player2Deck.slice(_removeIndex9+1))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard17,_drawCard18],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray9)});}}}//check for number match - if draw 2 card played on draw 2 card\nelse if(currentNumber===252){console.log('number matched!');//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//remove the played card from player1's deck and add it to playedCardsPile (immutably)\n//remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n//then update currentColor and currentNumber - turn will remain same\nvar _removeIndex10=player1Deck.indexOf(played_card);//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray10=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard19=_copiedDrawCardPileArray10.pop();var _drawCard20=_copiedDrawCardPileArray10.pop();//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//pull out last two elements from drawCardPile\nvar _drawCard1X2=_copiedDrawCardPileArray10.pop();var _drawCard2X2=_copiedDrawCardPileArray10.pop();var _updatedPlayer1Deck5=[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex10)),_toConsumableArray(player1Deck.slice(_removeIndex10+1)));_updatedPlayer1Deck5.push(_drawCard1X2);_updatedPlayer1Deck5.push(_drawCard2X2);!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(_updatedPlayer1Deck5),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard19,_drawCard20],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray10)});}else{!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex10)),_toConsumableArray(player1Deck.slice(_removeIndex10+1))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard19,_drawCard20],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray10)});}}else{//remove the played card from player2's deck and add it to playedCardsPile (immutably)\n//remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n//then update currentColor and currentNumber - turn will remain same\nvar _removeIndex11=player2Deck.indexOf(played_card);//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray11=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard21=_copiedDrawCardPileArray11.pop();var _drawCard22=_copiedDrawCardPileArray11.pop();//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//pull out last two elements from drawCardPile\nvar _drawCard1X3=_copiedDrawCardPileArray11.pop();var _drawCard2X3=_copiedDrawCardPileArray11.pop();var _updatedPlayer2Deck5=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex11)),_toConsumableArray(player2Deck.slice(_removeIndex11+1)));_updatedPlayer2Deck5.push(_drawCard1X3);_updatedPlayer2Deck5.push(_drawCard2X3);!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(_updatedPlayer2Deck5),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard21,_drawCard22],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray11)});}else{!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex11)),_toConsumableArray(player2Deck.slice(_removeIndex11+1))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard21,_drawCard22],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_colorOfPlayedCard2,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray11)});}}}//if no color or number match, invalid move - do not update state\nelse{alert('Invalid Move!');}break;}//if card played was a wild card\ncase'W':{//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//ask for new color\nvar newColor=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();//remove the played card from player1's deck and add it to playedCardsPile (immutably)\nvar _removeIndex12=player1Deck.indexOf(played_card);//then update turn, currentColor and currentNumber\n//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray12=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard23=_copiedDrawCardPileArray12.pop();var _drawCard24=_copiedDrawCardPileArray12.pop();var _updatedPlayer1Deck6=[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex12)),_toConsumableArray(player1Deck.slice(_removeIndex12+1)));_updatedPlayer1Deck6.push(_drawCard23);_updatedPlayer1Deck6.push(_drawCard24);!isSoundMuted&&playWildCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(_updatedPlayer1Deck6),currentColor:newColor,currentNumber:300,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray12)});}else{!isSoundMuted&&playWildCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex12)),_toConsumableArray(player1Deck.slice(_removeIndex12+1))),currentColor:newColor,currentNumber:300});}}else{//ask for new color\nvar _newColor=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();//remove the played card from player2's deck and add it to playedCardsPile (immutably)\nvar _removeIndex13=player2Deck.indexOf(played_card);//then update turn, currentColor and currentNumber\n//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray13=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard25=_copiedDrawCardPileArray13.pop();var _drawCard26=_copiedDrawCardPileArray13.pop();var _updatedPlayer2Deck6=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex13)),_toConsumableArray(player2Deck.slice(_removeIndex13+1)));_updatedPlayer2Deck6.push(_drawCard25);_updatedPlayer2Deck6.push(_drawCard26);!isSoundMuted&&playWildCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(_updatedPlayer2Deck6),currentColor:_newColor,currentNumber:300,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray13)});}else{!isSoundMuted&&playWildCardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex13)),_toConsumableArray(player2Deck.slice(_removeIndex13+1))),currentColor:_newColor,currentNumber:300});}}break;}//if card played was a draw four wild card\ncase'D4W':{//check who played the card and return new state accordingly\nif(cardPlayedBy==='Player 1'){//ask for new color\nvar _newColor2=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();//remove the played card from player1's deck and add it to playedCardsPile (immutably)\nvar _removeIndex14=player1Deck.indexOf(played_card);//remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray14=_toConsumableArray(drawCardPile);//pull out last four elements from it\nvar _drawCard27=_copiedDrawCardPileArray14.pop();var _drawCard28=_copiedDrawCardPileArray14.pop();var drawCard3=_copiedDrawCardPileArray14.pop();var drawCard4=_copiedDrawCardPileArray14.pop();//then update currentColor and currentNumber - turn will remain same\n//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player1Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//pull out last two elements from drawCardPile\nvar _drawCard1X4=_copiedDrawCardPileArray14.pop();var _drawCard2X4=_copiedDrawCardPileArray14.pop();var _updatedPlayer1Deck7=[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex14)),_toConsumableArray(player1Deck.slice(_removeIndex14+1)));_updatedPlayer1Deck7.push(_drawCard1X4);_updatedPlayer1Deck7.push(_drawCard2X4);!isSoundMuted&&playDraw4CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:_toConsumableArray(_updatedPlayer1Deck7),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard27,_drawCard28,drawCard3,drawCard4],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:_newColor2,currentNumber:600,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray14)});}else{!isSoundMuted&&playDraw4CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player1Deck),winner:checkWinner(player1Deck,'Player 1'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,_removeIndex14)),_toConsumableArray(player1Deck.slice(_removeIndex14+1))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard27,_drawCard28,drawCard3,drawCard4],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:_newColor2,currentNumber:600,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray14)});}}else{//ask for new color\nvar _newColor3=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();//remove the played card from player2's deck and add it to playedCardsPile (immutably)\nvar _removeIndex15=player2Deck.indexOf(played_card);//remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray15=_toConsumableArray(drawCardPile);//pull out last four elements from it\nvar _drawCard29=_copiedDrawCardPileArray15.pop();var _drawCard30=_copiedDrawCardPileArray15.pop();var _drawCard31=_copiedDrawCardPileArray15.pop();var _drawCard32=_copiedDrawCardPileArray15.pop();//then update currentColor and currentNumber - turn will remain same\n!isSoundMuted&&playDraw4CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex15)),_toConsumableArray(player2Deck.slice(_removeIndex15+1))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard29,_drawCard30,_drawCard31,_drawCard32],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_newColor3,currentNumber:600,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray15)});//if two cards remaining check if player pressed UNO button\n//if not pressed add 2 cards as penalty\nif(player2Deck.length===2&&!isUnoButtonPressed){alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.');//pull out last two elements from drawCardPile\nvar _drawCard1X5=_copiedDrawCardPileArray15.pop();var _drawCard2X5=_copiedDrawCardPileArray15.pop();var _updatedPlayer2Deck7=[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex15)),_toConsumableArray(player2Deck.slice(_removeIndex15+1)));_updatedPlayer2Deck7.push(_drawCard1X5);_updatedPlayer2Deck7.push(_drawCard2X5);!isSoundMuted&&playDraw4CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:_toConsumableArray(_updatedPlayer2Deck7),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard29,_drawCard30,_drawCard31,_drawCard32],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_newColor3,currentNumber:600,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray15)});}else{!isSoundMuted&&playDraw4CardSound();//send new state to server\nsocket.emit('updateGameState',{gameOver:checkGameOver(player2Deck),winner:checkWinner(player2Deck,'Player 2'),playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[played_card],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,_removeIndex15)),_toConsumableArray(player2Deck.slice(_removeIndex15+1))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard29,_drawCard30,_drawCard31,_drawCard32],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_newColor3,currentNumber:600,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray15)});}}}break;}};var onCardDrawnHandler=function onCardDrawnHandler(){//extract player who drew the card\nvar cardDrawnBy=turn;//check who drew the card and return new state accordingly\nif(cardDrawnBy==='Player 1'){//remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n//make a copy of drawCardPile array\nvar copiedDrawCardPileArray=_toConsumableArray(drawCardPile);//pull out last element from it\nvar drawCard=copiedDrawCardPileArray.pop();//extract number and color of drawn card\nvar colorOfDrawnCard=drawCard.charAt(drawCard.length-1);var numberOfDrawnCard=drawCard.charAt(0);if(colorOfDrawnCard===currentColor&&(drawCard==='skipR'||drawCard==='skipG'||drawCard==='skipB'||drawCard==='skipY')){alert(\"You drew \".concat(drawCard,\". It was played for you.\"));!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[drawCard],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),currentColor:colorOfDrawnCard,currentNumber:404,drawCardPile:_toConsumableArray(copiedDrawCardPileArray)});}else if(colorOfDrawnCard===currentColor&&(drawCard==='D2R'||drawCard==='D2G'||drawCard==='D2B'||drawCard==='D2Y')){alert(\"You drew \".concat(drawCard,\". It was played for you.\"));//remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray16=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar drawCard1=_copiedDrawCardPileArray16.pop();var drawCard2=_copiedDrawCardPileArray16.pop();!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[drawCard],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[drawCard1,drawCard2],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:colorOfDrawnCard,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray16)});}else if(drawCard==='W'){alert(\"You drew \".concat(drawCard,\". It was played for you.\"));//ask for new color\nvar newColor=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();!isSoundMuted&&playWildCardSound();//send new state to server\nsocket.emit('updateGameState',{turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[drawCard],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),currentColor:newColor,currentNumber:300,drawCardPile:_toConsumableArray(copiedDrawCardPileArray)});}else if(drawCard==='D4W'){alert(\"You drew \".concat(drawCard,\". It was played for you.\"));//ask for new color\nvar _newColor4=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();//remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray17=_toConsumableArray(drawCardPile);//pull out last four elements from it\nvar _drawCard33=_copiedDrawCardPileArray17.pop();var _drawCard34=_copiedDrawCardPileArray17.pop();var drawCard3=_copiedDrawCardPileArray17.pop();var drawCard4=_copiedDrawCardPileArray17.pop();!isSoundMuted&&playDraw4CardSound();//send new state to server\nsocket.emit('updateGameState',{playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[drawCard],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard33,_drawCard34,drawCard3,drawCard4],_toConsumableArray(player2Deck.slice(player2Deck.length))),currentColor:_newColor4,currentNumber:600,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray17)});}//if not action card - check if drawn card is playable\nelse if(numberOfDrawnCard===currentNumber||colorOfDrawnCard===currentColor){alert(\"You drew \".concat(drawCard,\". It was played for you.\"));!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{turn:'Player 2',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[drawCard],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),currentColor:colorOfDrawnCard,currentNumber:numberOfDrawnCard,drawCardPile:_toConsumableArray(copiedDrawCardPileArray)});}//else add the drawn card to player1's deck\nelse{!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{turn:'Player 2',player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[drawCard],_toConsumableArray(player1Deck.slice(player1Deck.length))),drawCardPile:_toConsumableArray(copiedDrawCardPileArray)});}}else{//remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray18=_toConsumableArray(drawCardPile);//pull out last element from it\nvar _drawCard35=_copiedDrawCardPileArray18.pop();//extract number and color of drawn card\nvar _colorOfDrawnCard=_drawCard35.charAt(_drawCard35.length-1);var _numberOfDrawnCard=_drawCard35.charAt(0);if(_colorOfDrawnCard===currentColor&&(_drawCard35==='skipR'||_drawCard35==='skipG'||_drawCard35==='skipB'||_drawCard35==='skipY')){alert(\"You drew \".concat(_drawCard35,\". It was played for you.\"));!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[_drawCard35],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),currentColor:_colorOfDrawnCard,currentNumber:404,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray18)});}else if(_colorOfDrawnCard===currentColor&&(_drawCard35==='D2R'||_drawCard35==='D2G'||_drawCard35==='D2B'||_drawCard35==='D2Y')){alert(\"You drew \".concat(_drawCard35,\". It was played for you.\"));//remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray19=_toConsumableArray(drawCardPile);//pull out last two elements from it\nvar _drawCard36=_copiedDrawCardPileArray19.pop();var _drawCard37=_copiedDrawCardPileArray19.pop();!isSoundMuted&&playDraw2CardSound();//send new state to server\nsocket.emit('updateGameState',{playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[_drawCard35],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard36,_drawCard37],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_colorOfDrawnCard,currentNumber:252,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray19)});}else if(_drawCard35==='W'){alert(\"You drew \".concat(_drawCard35,\". It was played for you.\"));//ask for new color\nvar _newColor5=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();!isSoundMuted&&playWildCardSound();//send new state to server\nsocket.emit('updateGameState',{turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[_drawCard35],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),currentColor:_newColor5,currentNumber:300,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray18)});}else if(_drawCard35==='D4W'){alert(\"You drew \".concat(_drawCard35,\". It was played for you.\"));//ask for new color\nvar _newColor6=prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();//remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n//make a copy of drawCardPile array\nvar _copiedDrawCardPileArray20=_toConsumableArray(drawCardPile);//pull out last four elements from it\nvar _drawCard38=_copiedDrawCardPileArray20.pop();var _drawCard39=_copiedDrawCardPileArray20.pop();var _drawCard40=_copiedDrawCardPileArray20.pop();var _drawCard41=_copiedDrawCardPileArray20.pop();!isSoundMuted&&playDraw4CardSound();//send new state to server\nsocket.emit('updateGameState',{playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[_drawCard35],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),player1Deck:[].concat(_toConsumableArray(player1Deck.slice(0,player1Deck.length)),[_drawCard38,_drawCard39,_drawCard40,_drawCard41],_toConsumableArray(player1Deck.slice(player1Deck.length))),currentColor:_newColor6,currentNumber:600,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray20)});}//if not action card - check if drawn card is playable\nelse if(_numberOfDrawnCard===currentNumber||_colorOfDrawnCard===currentColor){alert(\"You drew \".concat(_drawCard35,\". It was played for you.\"));!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{turn:'Player 1',playedCardsPile:[].concat(_toConsumableArray(playedCardsPile.slice(0,playedCardsPile.length)),[_drawCard35],_toConsumableArray(playedCardsPile.slice(playedCardsPile.length))),currentColor:_colorOfDrawnCard,currentNumber:_numberOfDrawnCard,drawCardPile:_toConsumableArray(_copiedDrawCardPileArray18)});}//else add the drawn card to player2's deck\nelse{!isSoundMuted&&playShufflingSound();//send new state to server\nsocket.emit('updateGameState',{turn:'Player 1',player2Deck:[].concat(_toConsumableArray(player2Deck.slice(0,player2Deck.length)),[_drawCard35],_toConsumableArray(player2Deck.slice(player2Deck.length))),drawCardPile:_toConsumableArray(_copiedDrawCardPileArray18)});}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"Game backgroundColorR backgroundColor\".concat(currentColor),children:[!roomFull?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"topInfo\",children:[/*#__PURE__*/_jsx(\"img\",{src:require('../assets/logo.png').default}),/*#__PURE__*/_jsxs(\"h1\",{children:[\"Game Code: \",room]}),/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"game-button green\",onClick:function onClick(){return setSoundMuted(!isSoundMuted);},children:isSoundMuted?/*#__PURE__*/_jsx(\"span\",{className:\"material-icons\",children:\"volume_off\"}):/*#__PURE__*/_jsx(\"span\",{className:\"material-icons\",children:\"volume_up\"})}),/*#__PURE__*/_jsx(\"button\",{className:\"game-button green\",onClick:function onClick(){if(isMusicMuted)playBBgMusic();else pause();setMusicMuted(!isMusicMuted);},children:isMusicMuted?/*#__PURE__*/_jsx(\"span\",{className:\"material-icons\",children:\"music_off\"}):/*#__PURE__*/_jsx(\"span\",{className:\"material-icons\",children:\"music_note\"})})]})]}),users.length===1&&currentUser==='Player 2'&&/*#__PURE__*/_jsx(\"h1\",{className:\"topInfoText\",children:\"Player 1 has left the game.\"}),users.length===1&&currentUser==='Player 1'&&/*#__PURE__*/_jsx(\"h1\",{className:\"topInfoText\",children:\"Waiting for Player 2 to join the game.\"}),users.length===2&&/*#__PURE__*/_jsx(_Fragment,{children:gameOver?/*#__PURE__*/_jsx(\"div\",{children:winner!==''&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"GAME OVER\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[winner,\" wins!\"]})]})}):/*#__PURE__*/_jsxs(\"div\",{children:[currentUser==='Player 1'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"player2Deck\",style:{pointerEvents:'none'},children:[/*#__PURE__*/_jsx(\"p\",{className:\"playerDeckText\",children:\"Player 2\"}),player2Deck.map(function(item,i){return/*#__PURE__*/_jsx(\"img\",{className:\"Card\",onClick:function onClick(){return onCardPlayedHandler(item);},src:require(\"../assets/card-back.png\").default},i);}),turn==='Player 2'&&/*#__PURE__*/_jsx(Spinner,{})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"middleInfo\",style:turn==='Player 2'?{pointerEvents:'none'}:null,children:[/*#__PURE__*/_jsx(\"button\",{className:\"game-button\",disabled:turn!=='Player 1',onClick:onCardDrawnHandler,children:\"DRAW CARD\"}),playedCardsPile&&playedCardsPile.length>0&&/*#__PURE__*/_jsx(\"img\",{className:\"Card\",src:require(\"../assets/cards-front/\".concat(playedCardsPile[playedCardsPile.length-1],\".png\")).default}),/*#__PURE__*/_jsx(\"button\",{className:\"game-button orange\",disabled:player1Deck.length!==2,onClick:function onClick(){setUnoButtonPressed(!isUnoButtonPressed);playUnoSound();},children:\"UNO\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"player1Deck\",style:turn==='Player 1'?null:{pointerEvents:'none'},children:[/*#__PURE__*/_jsx(\"p\",{className:\"playerDeckText\",children:\"Player 1\"}),player1Deck.map(function(item,i){return/*#__PURE__*/_jsx(\"img\",{className:\"Card\",onClick:function onClick(){return onCardPlayedHandler(item);},src:require(\"../assets/cards-front/\".concat(item,\".png\")).default},i);})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chatBoxWrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-box chat-box-player1\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-head\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Chat Box\"}),!isChatBoxHidden?/*#__PURE__*/_jsx(\"span\",{onClick:toggleChatBox,class:\"material-icons\",children:\"keyboard_arrow_down\"}):/*#__PURE__*/_jsx(\"span\",{onClick:toggleChatBox,class:\"material-icons\",children:\"keyboard_arrow_up\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-body\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"msg-insert\",children:messages.map(function(msg){if(msg.user==='Player 2')return/*#__PURE__*/_jsx(\"div\",{className:\"msg-receive\",children:msg.text});if(msg.user==='Player 1')return/*#__PURE__*/_jsx(\"div\",{className:\"msg-send\",children:msg.text});})}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-text\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type a message...\",value:message,onChange:function onChange(event){return setMessage(event.target.value);},onKeyPress:function onKeyPress(event){return event.key==='Enter'&&sendMessage(event);}})})]})]})}),\" \"]}),currentUser==='Player 2'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"player1Deck\",style:{pointerEvents:'none'},children:[/*#__PURE__*/_jsx(\"p\",{className:\"playerDeckText\",children:\"Player 1\"}),player1Deck.map(function(item,i){return/*#__PURE__*/_jsx(\"img\",{className:\"Card\",onClick:function onClick(){return onCardPlayedHandler(item);},src:require(\"../assets/card-back.png\").default},i);}),turn==='Player 1'&&/*#__PURE__*/_jsx(Spinner,{})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"middleInfo\",style:turn==='Player 1'?{pointerEvents:'none'}:null,children:[/*#__PURE__*/_jsx(\"button\",{className:\"game-button\",disabled:turn!=='Player 2',onClick:onCardDrawnHandler,children:\"DRAW CARD\"}),playedCardsPile&&playedCardsPile.length>0&&/*#__PURE__*/_jsx(\"img\",{className:\"Card\",src:require(\"../assets/cards-front/\".concat(playedCardsPile[playedCardsPile.length-1],\".png\")).default}),/*#__PURE__*/_jsx(\"button\",{className:\"game-button orange\",disabled:player2Deck.length!==2,onClick:function onClick(){setUnoButtonPressed(!isUnoButtonPressed);playUnoSound();},children:\"UNO\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"player2Deck\",style:turn==='Player 1'?{pointerEvents:'none'}:null,children:[/*#__PURE__*/_jsx(\"p\",{className:\"playerDeckText\",children:\"Player 2\"}),player2Deck.map(function(item,i){return/*#__PURE__*/_jsx(\"img\",{className:\"Card\",onClick:function onClick(){return onCardPlayedHandler(item);},src:require(\"../assets/cards-front/\".concat(item,\".png\")).default},i);})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chatBoxWrapper\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-box chat-box-player2\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-head\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Chat Box\"}),!isChatBoxHidden?/*#__PURE__*/_jsx(\"span\",{onClick:toggleChatBox,class:\"material-icons\",children:\"keyboard_arrow_down\"}):/*#__PURE__*/_jsx(\"span\",{onClick:toggleChatBox,class:\"material-icons\",children:\"keyboard_arrow_up\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-body\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"msg-insert\",children:messages.map(function(msg){if(msg.user==='Player 1')return/*#__PURE__*/_jsx(\"div\",{className:\"msg-receive\",children:msg.text});if(msg.user==='Player 2')return/*#__PURE__*/_jsx(\"div\",{className:\"msg-send\",children:msg.text});})}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-text\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type a message...\",value:message,onChange:function onChange(event){return setMessage(event.target.value);},onKeyPress:function onKeyPress(event){return event.key==='Enter'&&sendMessage(event);}})})]})]})}),\" \"]})]})})]}):/*#__PURE__*/_jsx(\"h1\",{children:\"Room full\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"a\",{href:\"/\",children:/*#__PURE__*/_jsx(\"button\",{className:\"game-button red\",children:\"QUIT\"})})]});};export default Game;","map":{"version":3,"sources":["C:/Users/allan/Desktop/uno-online/client/src/components/Game.js"],"names":["React","useEffect","useState","PACK_OF_CARDS","shuffleArray","io","queryString","Spinner","useSound","bgMusic","unoSound","shufflingSound","skipCardSound","draw2CardSound","wildCardSound","draw4CardSound","gameOverSound","socket","ENDPOINT","Game","props","data","parse","location","search","roomCode","room","setRoom","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","connectionOptions","connect","emit","error","cleanup","off","gameOver","setGameOver","winner","setWinner","turn","setTurn","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","currentColor","setCurrentColor","currentNumber","setCurrentNumber","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","isSoundMuted","setSoundMuted","isMusicMuted","setMusicMuted","loop","playBBgMusic","pause","playUnoSound","playShufflingSound","playSkipCardSound","playDraw2CardSound","playWildCardSound","playDraw4CardSound","playGameOverSound","shuffledCards","splice","startingCardIndex","Math","floor","random","charAt","on","name","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","length","checkWinner","player","toggleChatBox","style","display","sendMessage","event","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","console","log","removeIndex","indexOf","alert","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","slice","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","cardDrawnBy","drawCard","colorOfDrawnCard","numberOfDrawnCard","require","default","pointerEvents","map","item","i","msg","user","text","target","value","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport PACK_OF_CARDS from '../utils/packOfCards'\r\nimport shuffleArray from '../utils/shuffleArray'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Spinner from './Spinner'\r\nimport useSound from 'use-sound'\r\n\r\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\r\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\r\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\r\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\r\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\r\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\r\n\r\n//NUMBER CODES FOR ACTION CARDS\r\n//SKIP - 404\r\n//DRAW 2 - 252\r\n//WILD - 300\r\n//DRAW 4 WILD - 600\r\n\r\nlet socket\r\n// const ENDPOINT = 'http://localhost:5000'\r\nconst ENDPOINT = 'https://uno-game-allan.herokuapp.com/'\r\n\r\nconst Game = (props) => {\r\n    const data = queryString.parse(props.location.search)\r\n\r\n    //initialize socket state\r\n    const [room, setRoom] = useState(data.roomCode)\r\n    const [roomFull, setRoomFull] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        //cleanup on component unmount\r\n        return function cleanup() {\r\n            socket.emit('disconnect')\r\n            //shut down connnection instance\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n    //initialize game state\r\n    const [gameOver, setGameOver] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [turn, setTurn] = useState('')\r\n    const [player1Deck, setPlayer1Deck] = useState([])\r\n    const [player2Deck, setPlayer2Deck] = useState([])\r\n    const [currentColor, setCurrentColor] = useState('')\r\n    const [currentNumber, setCurrentNumber] = useState('')\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\r\n    const [drawCardPile, setDrawCardPile] = useState([])\r\n\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [isSoundMuted, setSoundMuted] = useState(false)\r\n    const [isMusicMuted, setMusicMuted] = useState(true)\r\n\r\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [playShufflingSound] = useSound(shufflingSound)\r\n    const [playSkipCardSound] = useSound(skipCardSound)\r\n    const [playDraw2CardSound] = useSound(draw2CardSound)\r\n    const [playWildCardSound] = useSound(wildCardSound)\r\n    const [playDraw4CardSound] = useSound(draw4CardSound)\r\n    const [playGameOverSound] = useSound(gameOverSound)\r\n\r\n    //runs once on component mount\r\n    useEffect(() => {\r\n        //shuffle PACK_OF_CARDS array\r\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\r\n\r\n        //extract first 7 elements to player1Deck\r\n        const player1Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract first 7 elements to player2Deck\r\n        const player2Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract random card from shuffledCards and check if its not an action card\r\n        let startingCardIndex\r\n        while(true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94)\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\r\n            shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\r\n            shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\r\n            shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\r\n            shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        //extract the card from that startingCardIndex into the playedCardsPile\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\r\n\r\n        //store all remaining cards into drawCardPile\r\n        const drawCardPile = shuffledCards\r\n\r\n        //send initial state to server\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile]\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            gameOver && setGameOver(gameOver)\r\n            gameOver===true && playGameOverSound()\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [])\r\n\r\n    //some util functions\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1\r\n    }\r\n    \r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : ''\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body')\r\n        if(isChatBoxHidden) {\r\n            chatBody.style.display = 'block'\r\n            setChatBoxHidden(false)\r\n        }\r\n        else {\r\n            chatBody.style.display = 'none'\r\n            setChatBoxHidden(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage= (event) => {\r\n        event.preventDefault()\r\n        if(message) {\r\n            socket.emit('sendMessage', { message: message }, () => {\r\n                setMessage('')\r\n            })\r\n        }\r\n    }\r\n\r\n    //driver functions\r\n    const onCardPlayedHandler = (played_card) => {\r\n        //extract player who played the card\r\n        const cardPlayedBy = turn\r\n        switch(played_card) {\r\n            //if card played was a number card\r\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\r\n                //extract number and color of played card\r\n                const numberOfPlayedCard = played_card.charAt(0)\r\n                const colorOfPlayedCard = played_card.charAt(1)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match\r\n                else if(currentNumber === numberOfPlayedCard) {\r\n                    console.log('numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a skip card\r\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(4)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if skip card played on skip card\r\n                else if(currentNumber === 404) {\r\n                    console.log('Numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw 2 card\r\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(2)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if draw 2 card played on draw 2 card\r\n                else if(currentNumber === 252) {                        \r\n                    console.log('number matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a wild card\r\n            case 'W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1)\r\n                        updatedPlayer1Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1)\r\n                        updatedPlayer2Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw four wild card\r\n            case 'D4W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1X)\r\n                        updatedPlayer1Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    !isSoundMuted && playDraw4CardSound()\r\n                    //send new state to server\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    })\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1X)\r\n                        updatedPlayer2Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    \r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        //check who drew the card and return new state accordingly\r\n        if(cardDrawnBy === 'Player 1') {\r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img src={require('../assets/logo.png').default} />\r\n                    <h1>Game Code: {room}</h1>\r\n                    <span>\r\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\r\n                        <button className='game-button green' onClick={() => {\r\n                            if(isMusicMuted)\r\n                                playBBgMusic()\r\n                            else\r\n                                pause()\r\n                            setMusicMuted(!isMusicMuted)\r\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\r\n                    </span>\r\n                </div>\r\n\r\n                {/* PLAYER LEFT MESSAGES */}\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\r\n                    <div>\r\n                        {/* PLAYER 1 VIEW */}\r\n                        {currentUser === 'Player 1' && <>    \r\n                        <div className='player2Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 2' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player1\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n\r\n                        {/* PLAYER 2 VIEW */}\r\n                        {currentUser === 'Player 2' && <>\r\n                        <div className='player1Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 1' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player2\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n                    </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <a href='/'><button className=\"game-button red\">QUIT</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}