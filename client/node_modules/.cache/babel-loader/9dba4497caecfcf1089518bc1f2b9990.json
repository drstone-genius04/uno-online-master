{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allan\\\\Desktop\\\\uno-online\\\\client\\\\src\\\\components\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PACK_OF_CARDS from '../utils/packOfCards';\nimport shuffleArray from '../utils/shuffleArray';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\nimport Spinner from './Spinner';\nimport useSound from 'use-sound';\nimport bgMusic from '../assets/sounds/game-bg-music.mp3';\nimport unoSound from '../assets/sounds/uno-sound.mp3';\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3';\nimport skipCardSound from '../assets/sounds/skip-sound.mp3';\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3';\nimport wildCardSound from '../assets/sounds/wild-sound.mp3';\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3';\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'; //NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet socket; // const ENDPOINT = 'http://localhost:5000'\n\nconst ENDPOINT = 'http://localhost:5000';\n\nconst Game = props => {\n  _s();\n\n  const data = queryString.parse(props.location.search); //initialize socket state\n\n  const [room, setRoom] = useState(data.roomCode);\n  const [roomFull, setRoomFull] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const connectionOptions = {\n      \"forceNew\": true,\n      \"reconnectionAttempts\": \"Infinity\",\n      \"timeout\": 10000,\n      \"transports\": [\"websocket\"]\n    };\n    socket = io.connect(ENDPOINT, connectionOptions);\n    socket.emit('join', {\n      room: room\n    }, error => {\n      if (error) setRoomFull(true);\n    }); //cleanup on component unmount\n\n    return function cleanup() {\n      socket.emit('disconnect'); //shut down connnection instance\n\n      socket.off();\n    };\n  }, []); //initialize game state\n\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState('');\n  const [turn, setTurn] = useState('');\n  const [player1Deck, setPlayer1Deck] = useState([]);\n  const [player2Deck, setPlayer2Deck] = useState([]);\n  const [currentColor, setCurrentColor] = useState('');\n  const [currentNumber, setCurrentNumber] = useState('');\n  const [playedCardsPile, setPlayedCardsPile] = useState([]);\n  const [drawCardPile, setDrawCardPile] = useState([]);\n  const [isChatBoxHidden, setChatBoxHidden] = useState(true);\n  const [isUnoButtonPressed, setUnoButtonPressed] = useState(false);\n  const [isSoundMuted, setSoundMuted] = useState(false);\n  const [isMusicMuted, setMusicMuted] = useState(true);\n  const [playBBgMusic, {\n    pause\n  }] = useSound(bgMusic, {\n    loop: true\n  });\n  const [playUnoSound] = useSound(unoSound);\n  const [playShufflingSound] = useSound(shufflingSound);\n  const [playSkipCardSound] = useSound(skipCardSound);\n  const [playDraw2CardSound] = useSound(draw2CardSound);\n  const [playWildCardSound] = useSound(wildCardSound);\n  const [playDraw4CardSound] = useSound(draw4CardSound);\n  const [playGameOverSound] = useSound(gameOverSound); //runs once on component mount\n\n  useEffect(() => {\n    //shuffle PACK_OF_CARDS array\n    const shuffledCards = shuffleArray(PACK_OF_CARDS); //extract first 7 elements to player1Deck\n\n    const player1Deck = shuffledCards.splice(0, 7); //extract first 7 elements to player2Deck\n\n    const player2Deck = shuffledCards.splice(0, 7); //extract random card from shuffledCards and check if its not an action card\n\n    let startingCardIndex;\n\n    while (true) {\n      startingCardIndex = Math.floor(Math.random() * 94);\n\n      if (shuffledCards[startingCardIndex] === 'skipR' || shuffledCards[startingCardIndex] === '_R' || shuffledCards[startingCardIndex] === 'D2R' || shuffledCards[startingCardIndex] === 'skipG' || shuffledCards[startingCardIndex] === '_G' || shuffledCards[startingCardIndex] === 'D2G' || shuffledCards[startingCardIndex] === 'skipB' || shuffledCards[startingCardIndex] === '_B' || shuffledCards[startingCardIndex] === 'D2B' || shuffledCards[startingCardIndex] === 'skipY' || shuffledCards[startingCardIndex] === '_Y' || shuffledCards[startingCardIndex] === 'D2Y' || shuffledCards[startingCardIndex] === 'W' || shuffledCards[startingCardIndex] === 'D4W') {\n        continue;\n      } else break;\n    } //extract the card from that startingCardIndex into the playedCardsPile\n\n\n    const playedCardsPile = shuffledCards.splice(startingCardIndex, 1); //store all remaining cards into drawCardPile\n\n    const drawCardPile = shuffledCards; //send initial state to server\n\n    socket.emit('initGameState', {\n      gameOver: false,\n      turn: 'Player 1',\n      player1Deck: [...player1Deck],\n      player2Deck: [...player2Deck],\n      currentColor: playedCardsPile[0].charAt(1),\n      currentNumber: playedCardsPile[0].charAt(0),\n      playedCardsPile: [...playedCardsPile],\n      drawCardPile: [...drawCardPile]\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('initGameState', ({\n      gameOver,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile\n    }) => {\n      setGameOver(gameOver);\n      setTurn(turn);\n      setPlayer1Deck(player1Deck);\n      setPlayer2Deck(player2Deck);\n      setCurrentColor(currentColor);\n      setCurrentNumber(currentNumber);\n      setPlayedCardsPile(playedCardsPile);\n      setDrawCardPile(drawCardPile);\n    });\n    socket.on('updateGameState', ({\n      gameOver,\n      winner,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile\n    }) => {\n      gameOver && setGameOver(gameOver);\n      gameOver === true && playGameOverSound();\n      winner && setWinner(winner);\n      turn && setTurn(turn);\n      player1Deck && setPlayer1Deck(player1Deck);\n      player2Deck && setPlayer2Deck(player2Deck);\n      currentColor && setCurrentColor(currentColor);\n      currentNumber && setCurrentNumber(currentNumber);\n      playedCardsPile && setPlayedCardsPile(playedCardsPile);\n      drawCardPile && setDrawCardPile(drawCardPile);\n      setUnoButtonPressed(false);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on('currentUserData', ({\n      name\n    }) => {\n      setCurrentUser(name);\n    });\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n      const chatBody = document.querySelector('.chat-body');\n      chatBody.scrollTop = chatBody.scrollHeight;\n    });\n  }, []); //some util functions\n\n  const checkGameOver = arr => {\n    return arr.length === 1;\n  };\n\n  const checkWinner = (arr, player) => {\n    return arr.length === 1 ? player : '';\n  };\n\n  const toggleChatBox = () => {\n    const chatBody = document.querySelector('.chat-body');\n\n    if (isChatBoxHidden) {\n      chatBody.style.display = 'block';\n      setChatBoxHidden(false);\n    } else {\n      chatBody.style.display = 'none';\n      setChatBoxHidden(true);\n    }\n  };\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', {\n        message: message\n      }, () => {\n        setMessage('');\n      });\n    }\n  }; //driver functions\n\n\n  const onCardPlayedHandler = played_card => {\n    //extract player who played the card\n    const cardPlayedBy = turn;\n\n    switch (played_card) {\n      //if card played was a number card\n      case '0R':\n      case '1R':\n      case '2R':\n      case '3R':\n      case '4R':\n      case '5R':\n      case '6R':\n      case '7R':\n      case '8R':\n      case '9R':\n      case '_R':\n      case '0G':\n      case '1G':\n      case '2G':\n      case '3G':\n      case '4G':\n      case '5G':\n      case '6G':\n      case '7G':\n      case '8G':\n      case '9G':\n      case '_G':\n      case '0B':\n      case '1B':\n      case '2B':\n      case '3B':\n      case '4B':\n      case '5B':\n      case '6B':\n      case '7B':\n      case '8B':\n      case '9B':\n      case '_B':\n      case '0Y':\n      case '1Y':\n      case '2Y':\n      case '3Y':\n      case '4Y':\n      case '5Y':\n      case '6Y':\n      case '7Y':\n      case '8Y':\n      case '9Y':\n      case '_Y':\n        {\n          //extract number and color of played card\n          const numberOfPlayedCard = played_card.charAt(0);\n          const colorOfPlayedCard = played_card.charAt(1); //check for color match\n\n          if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!'); //check who played the card and return new state accordingly\n\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //then update turn, currentColor and currentNumber\n              const removeIndex = player1Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1);\n                updatedPlayer1Deck.push(drawCard2);\n                !isSoundMuted && playShufflingSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  turn: 'Player 2',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playShufflingSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  turn: 'Player 2',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update turn, currentColor and currentNumber\n              const removeIndex = player2Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1);\n                updatedPlayer2Deck.push(drawCard2);\n                !isSoundMuted && playShufflingSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  turn: 'Player 1',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playShufflingSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  turn: 'Player 1',\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: numberOfPlayedCard\n                });\n              }\n            }\n          } //check for number match\n          else if (currentNumber === numberOfPlayedCard) {\n              console.log('numbers matched!'); //check who played the card and return new state accordingly\n\n              if (cardPlayedBy === 'Player 1') {\n                //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                //then update turn, currentColor and currentNumber\n                const removeIndex = player1Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                  alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                  const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                  const drawCard1 = copiedDrawCardPileArray.pop();\n                  const drawCard2 = copiedDrawCardPileArray.pop();\n                  const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                  updatedPlayer1Deck.push(drawCard1);\n                  updatedPlayer1Deck.push(drawCard2);\n                  !isSoundMuted && playShufflingSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player1Deck),\n                    winner: checkWinner(player1Deck, 'Player 1'),\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...updatedPlayer1Deck],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: numberOfPlayedCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                } else {\n                  !isSoundMuted && playShufflingSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player1Deck),\n                    winner: checkWinner(player1Deck, 'Player 1'),\n                    turn: 'Player 2',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: numberOfPlayedCard\n                  });\n                }\n              } else {\n                //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                //then update turn, currentColor and currentNumber\n                const removeIndex = player2Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                  alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                  const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                  const drawCard1 = copiedDrawCardPileArray.pop();\n                  const drawCard2 = copiedDrawCardPileArray.pop();\n                  const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                  updatedPlayer2Deck.push(drawCard1);\n                  updatedPlayer2Deck.push(drawCard2);\n                  !isSoundMuted && playShufflingSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player2Deck),\n                    winner: checkWinner(player2Deck, 'Player 2'),\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...updatedPlayer2Deck],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: numberOfPlayedCard,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                } else {\n                  !isSoundMuted && playShufflingSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player2Deck),\n                    winner: checkWinner(player2Deck, 'Player 2'),\n                    turn: 'Player 1',\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: numberOfPlayedCard\n                  });\n                }\n              }\n            } //if no color or number match, invalid move - do not update state\n            else {\n                alert('Invalid Move!');\n              }\n\n          break;\n        }\n      //if card played was a skip card\n\n      case 'skipR':\n      case 'skipG':\n      case 'skipB':\n      case 'skipY':\n        {\n          //extract color of played skip card\n          const colorOfPlayedCard = played_card.charAt(4); //check for color match\n\n          if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!'); //check who played the card and return new state accordingly\n\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber\n              const removeIndex = player1Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1);\n                updatedPlayer1Deck.push(drawCard2);\n                !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //then update currentColor and currentNumber\n              const removeIndex = player2Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1);\n                updatedPlayer2Deck.push(drawCard2);\n                !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 2'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 404\n                });\n              }\n            }\n          } //check for number match - if skip card played on skip card\n          else if (currentNumber === 404) {\n              console.log('Numbers matched!'); //check who played the card and return new state accordingly\n\n              if (cardPlayedBy === 'Player 1') {\n                //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                //then update currentColor and currentNumber - turn will remain same\n                const removeIndex = player1Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                  alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                  const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                  const drawCard1 = copiedDrawCardPileArray.pop();\n                  const drawCard2 = copiedDrawCardPileArray.pop();\n                  const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                  updatedPlayer1Deck.push(drawCard1);\n                  updatedPlayer1Deck.push(drawCard2);\n                  !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player1Deck),\n                    winner: checkWinner(player1Deck, 'Player 1'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...updatedPlayer1Deck],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                } else {\n                  !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player1Deck),\n                    winner: checkWinner(player1Deck, 'Player 1'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 404\n                  });\n                }\n              } else {\n                //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                //then update currentColor and currentNumber - turn will remain same\n                const removeIndex = player2Deck.indexOf(played_card); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                  alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n                  const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                  const drawCard1 = copiedDrawCardPileArray.pop();\n                  const drawCard2 = copiedDrawCardPileArray.pop();\n                  const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                  updatedPlayer2Deck.push(drawCard1);\n                  updatedPlayer2Deck.push(drawCard2);\n                  !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player2Deck),\n                    winner: checkWinner(player2Deck, 'Player 2'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...updatedPlayer2Deck],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                } else {\n                  !isSoundMuted && playSkipCardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player2Deck),\n                    winner: checkWinner(player2Deck, 'Player 2'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 404\n                  });\n                }\n              }\n            } //if no color or number match, invalid move - do not update state\n            else {\n                alert('Invalid Move!');\n              }\n\n          break;\n        }\n      //if card played was a draw 2 card\n\n      case 'D2R':\n      case 'D2G':\n      case 'D2B':\n      case 'D2Y':\n        {\n          //extract color of played skip card\n          const colorOfPlayedCard = played_card.charAt(2); //check for color match\n\n          if (currentColor === colorOfPlayedCard) {\n            console.log('colors matched!'); //check who played the card and return new state accordingly\n\n            if (cardPlayedBy === 'Player 1') {\n              //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n              //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player1Deck.indexOf(played_card); //make a copy of drawCardPile array\n\n              const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop(); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //pull out last two elements from drawCardPile\n\n                const drawCard1X = copiedDrawCardPileArray.pop();\n                const drawCard2X = copiedDrawCardPileArray.pop();\n                const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                updatedPlayer1Deck.push(drawCard1X);\n                updatedPlayer1Deck.push(drawCard2X);\n                !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...updatedPlayer1Deck],\n                  player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player1Deck),\n                  winner: checkWinner(player1Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                  player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              }\n            } else {\n              //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n              //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n              //then update currentColor and currentNumber - turn will remain same\n              const removeIndex = player2Deck.indexOf(played_card); //make a copy of drawCardPile array\n\n              const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop(); //if two cards remaining check if player pressed UNO button\n              //if not pressed add 2 cards as penalty\n\n              if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //pull out last two elements from drawCardPile\n\n                const drawCard1X = copiedDrawCardPileArray.pop();\n                const drawCard2X = copiedDrawCardPileArray.pop();\n                const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                updatedPlayer2Deck.push(drawCard1X);\n                updatedPlayer2Deck.push(drawCard2X);\n                !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...updatedPlayer2Deck],\n                  player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              } else {\n                !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                socket.emit('updateGameState', {\n                  gameOver: checkGameOver(player2Deck),\n                  winner: checkWinner(player2Deck, 'Player 1'),\n                  playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                  player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                  player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                  currentColor: colorOfPlayedCard,\n                  currentNumber: 252,\n                  drawCardPile: [...copiedDrawCardPileArray]\n                });\n              }\n            }\n          } //check for number match - if draw 2 card played on draw 2 card\n          else if (currentNumber === 252) {\n              console.log('number matched!'); //check who played the card and return new state accordingly\n\n              if (cardPlayedBy === 'Player 1') {\n                //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //then update currentColor and currentNumber - turn will remain same\n                const removeIndex = player1Deck.indexOf(played_card); //make a copy of drawCardPile array\n\n                const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop(); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                  alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //pull out last two elements from drawCardPile\n\n                  const drawCard1X = copiedDrawCardPileArray.pop();\n                  const drawCard2X = copiedDrawCardPileArray.pop();\n                  const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n                  updatedPlayer1Deck.push(drawCard1X);\n                  updatedPlayer1Deck.push(drawCard2X);\n                  !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player1Deck),\n                    winner: checkWinner(player1Deck, 'Player 1'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...updatedPlayer1Deck],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                } else {\n                  !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player1Deck),\n                    winner: checkWinner(player1Deck, 'Player 1'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                }\n              } else {\n                //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //then update currentColor and currentNumber - turn will remain same\n                const removeIndex = player2Deck.indexOf(played_card); //make a copy of drawCardPile array\n\n                const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop(); //if two cards remaining check if player pressed UNO button\n                //if not pressed add 2 cards as penalty\n\n                if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                  alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //pull out last two elements from drawCardPile\n\n                  const drawCard1X = copiedDrawCardPileArray.pop();\n                  const drawCard2X = copiedDrawCardPileArray.pop();\n                  const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n                  updatedPlayer2Deck.push(drawCard1X);\n                  updatedPlayer2Deck.push(drawCard2X);\n                  !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player2Deck),\n                    winner: checkWinner(player2Deck, 'Player 1'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...updatedPlayer2Deck],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                } else {\n                  !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n                  socket.emit('updateGameState', {\n                    gameOver: checkGameOver(player2Deck),\n                    winner: checkWinner(player2Deck, 'Player 1'),\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                    player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n                    currentColor: colorOfPlayedCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray]\n                  });\n                }\n              }\n            } //if no color or number match, invalid move - do not update state\n            else {\n                alert('Invalid Move!');\n              }\n\n          break;\n        }\n      //if card played was a wild card\n\n      case 'W':\n        {\n          //check who played the card and return new state accordingly\n          if (cardPlayedBy === 'Player 1') {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n\n            const removeIndex = player1Deck.indexOf(played_card); //then update turn, currentColor and currentNumber\n            //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n\n            if (player1Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n              const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n              updatedPlayer1Deck.push(drawCard1);\n              updatedPlayer1Deck.push(drawCard2);\n              !isSoundMuted && playWildCardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                turn: 'Player 2',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...updatedPlayer1Deck],\n                currentColor: newColor,\n                currentNumber: 300,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playWildCardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                turn: 'Player 2',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                currentColor: newColor,\n                currentNumber: 300\n              });\n            }\n          } else {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n\n            const removeIndex = player2Deck.indexOf(played_card); //then update turn, currentColor and currentNumber\n            //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n\n            if (player2Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //make a copy of drawCardPile array\n\n              const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n              const drawCard1 = copiedDrawCardPileArray.pop();\n              const drawCard2 = copiedDrawCardPileArray.pop();\n              const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n              updatedPlayer2Deck.push(drawCard1);\n              updatedPlayer2Deck.push(drawCard2);\n              !isSoundMuted && playWildCardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                turn: 'Player 1',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...updatedPlayer2Deck],\n                currentColor: newColor,\n                currentNumber: 300,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playWildCardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                turn: 'Player 1',\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                currentColor: newColor,\n                currentNumber: 300\n              });\n            }\n          }\n\n          break;\n        }\n      //if card played was a draw four wild card\n\n      case 'D4W':\n        {\n          //check who played the card and return new state accordingly\n          if (cardPlayedBy === 'Player 1') {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n\n            const removeIndex = player1Deck.indexOf(played_card); //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n            //make a copy of drawCardPile array\n\n            const copiedDrawCardPileArray = [...drawCardPile]; //pull out last four elements from it\n\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const drawCard3 = copiedDrawCardPileArray.pop();\n            const drawCard4 = copiedDrawCardPileArray.pop(); //then update currentColor and currentNumber - turn will remain same\n            //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n\n            if (player1Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //pull out last two elements from drawCardPile\n\n              const drawCard1X = copiedDrawCardPileArray.pop();\n              const drawCard2X = copiedDrawCardPileArray.pop();\n              const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n              updatedPlayer1Deck.push(drawCard1X);\n              updatedPlayer1Deck.push(drawCard2X);\n              !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...updatedPlayer1Deck],\n                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player1Deck),\n                winner: checkWinner(player1Deck, 'Player 1'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            }\n          } else {\n            //ask for new color\n            const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n\n            const removeIndex = player2Deck.indexOf(played_card); //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n            //make a copy of drawCardPile array\n\n            const copiedDrawCardPileArray = [...drawCardPile]; //pull out last four elements from it\n\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const drawCard3 = copiedDrawCardPileArray.pop();\n            const drawCard4 = copiedDrawCardPileArray.pop(); //then update currentColor and currentNumber - turn will remain same\n\n            !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n              player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n              currentColor: newColor,\n              currentNumber: 600,\n              drawCardPile: [...copiedDrawCardPileArray]\n            }); //if two cards remaining check if player pressed UNO button\n            //if not pressed add 2 cards as penalty\n\n            if (player2Deck.length === 2 && !isUnoButtonPressed) {\n              alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.'); //pull out last two elements from drawCardPile\n\n              const drawCard1X = copiedDrawCardPileArray.pop();\n              const drawCard2X = copiedDrawCardPileArray.pop();\n              const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n              updatedPlayer2Deck.push(drawCard1X);\n              updatedPlayer2Deck.push(drawCard2X);\n              !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...updatedPlayer2Deck],\n                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            } else {\n              !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n              socket.emit('updateGameState', {\n                gameOver: checkGameOver(player2Deck),\n                winner: checkWinner(player2Deck, 'Player 2'),\n                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n                currentColor: newColor,\n                currentNumber: 600,\n                drawCardPile: [...copiedDrawCardPileArray]\n              });\n            }\n          }\n        }\n        break;\n    }\n  };\n\n  const onCardDrawnHandler = () => {\n    //extract player who drew the card\n    const cardDrawnBy = turn; //check who drew the card and return new state accordingly\n\n    if (cardDrawnBy === 'Player 1') {\n      //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n      //make a copy of drawCardPile array\n      const copiedDrawCardPileArray = [...drawCardPile]; //pull out last element from it\n\n      const drawCard = copiedDrawCardPileArray.pop(); //extract number and color of drawn card\n\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      let numberOfDrawnCard = drawCard.charAt(0);\n\n      if (colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 404,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`); //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n        //make a copy of drawCardPile array\n\n        const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 252,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'W') {\n        alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        !isSoundMuted && playWildCardSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: newColor,\n          currentNumber: 300,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'D4W') {\n        alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n        //make a copy of drawCardPile array\n\n        const copiedDrawCardPileArray = [...drawCardPile]; //pull out last four elements from it\n\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n          currentColor: newColor,\n          currentNumber: 600,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } //if not action card - check if drawn card is playable\n      else if (numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n          alert(`You drew ${drawCard}. It was played for you.`);\n          !isSoundMuted && playShufflingSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            turn: 'Player 2',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            currentColor: colorOfDrawnCard,\n            currentNumber: numberOfDrawnCard,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        } //else add the drawn card to player1's deck\n        else {\n            !isSoundMuted && playShufflingSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              turn: 'Player 2',\n              player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          }\n    } else {\n      //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n      //make a copy of drawCardPile array\n      const copiedDrawCardPileArray = [...drawCardPile]; //pull out last element from it\n\n      const drawCard = copiedDrawCardPileArray.pop(); //extract number and color of drawn card\n\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      let numberOfDrawnCard = drawCard.charAt(0);\n\n      if (colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        !isSoundMuted && playShufflingSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 404,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\n        alert(`You drew ${drawCard}. It was played for you.`); //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n        //make a copy of drawCardPile array\n\n        const copiedDrawCardPileArray = [...drawCardPile]; //pull out last two elements from it\n\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw2CardSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 252,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'W') {\n        alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        !isSoundMuted && playWildCardSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: newColor,\n          currentNumber: 300,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'D4W') {\n        alert(`You drew ${drawCard}. It was played for you.`); //ask for new color\n\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase(); //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n        //make a copy of drawCardPile array\n\n        const copiedDrawCardPileArray = [...drawCardPile]; //pull out last four elements from it\n\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n        !isSoundMuted && playDraw4CardSound(); //send new state to server\n\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n          currentColor: newColor,\n          currentNumber: 600,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } //if not action card - check if drawn card is playable\n      else if (numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n          alert(`You drew ${drawCard}. It was played for you.`);\n          !isSoundMuted && playShufflingSound(); //send new state to server\n\n          socket.emit('updateGameState', {\n            turn: 'Player 1',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n            currentColor: colorOfDrawnCard,\n            currentNumber: numberOfDrawnCard,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        } //else add the drawn card to player2's deck\n        else {\n            !isSoundMuted && playShufflingSound(); //send new state to server\n\n            socket.emit('updateGameState', {\n              turn: 'Player 1',\n              player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Game backgroundColorR backgroundColor${currentColor}`,\n    children: [!roomFull ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: require('../assets/logo.png').default\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Game Code: \", room]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"game-button green\",\n            onClick: () => setSoundMuted(!isSoundMuted),\n            children: isSoundMuted ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"volume_off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1226,\n              columnNumber: 124\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"volume_up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1226,\n              columnNumber: 177\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"game-button green\",\n            onClick: () => {\n              if (isMusicMuted) playBBgMusic();else pause();\n              setMusicMuted(!isMusicMuted);\n            },\n            children: isMusicMuted ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"music_off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1233,\n              columnNumber: 44\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"material-icons\",\n              children: \"music_note\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1233,\n              columnNumber: 96\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1227,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 17\n      }, this), users.length === 1 && currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Player 1 has left the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 68\n      }, this), users.length === 1 && currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Waiting for Player 2 to join the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1239,\n        columnNumber: 68\n      }, this), users.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: winner !== '' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"GAME OVER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1243,\n              columnNumber: 58\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [winner, \" wins!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1243,\n              columnNumber: 76\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1243,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1248,\n                columnNumber: 29\n              }, this), player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/card-back.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1250,\n                columnNumber: 33\n              }, this)), turn === 'Player 2' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1257,\n                columnNumber: 51\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1247,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1259,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: turn === 'Player 2' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: turn !== 'Player 1',\n                onClick: onCardDrawnHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1261,\n                columnNumber: 29\n              }, this), playedCardsPile && playedCardsPile.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                src: require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length - 1]}.png`).default\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1263,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button orange\",\n                disabled: player1Deck.length !== 2,\n                onClick: () => {\n                  setUnoButtonPressed(!isUnoButtonPressed);\n                  playUnoSound();\n                },\n                children: \"UNO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1267,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1260,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1272,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: turn === 'Player 1' ? null : {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1274,\n                columnNumber: 29\n              }, this), player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/cards-front/${item}.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1276,\n                columnNumber: 33\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1273,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxWrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-box chat-box-player1\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-head\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Chat Box\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1288,\n                    columnNumber: 37\n                  }, this), !isChatBoxHidden ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_down\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1290,\n                    columnNumber: 37\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1291,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1287,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"msg-insert\",\n                    children: messages.map(msg => {\n                      if (msg.user === 'Player 2') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-receive\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1297,\n                        columnNumber: 56\n                      }, this);\n                      if (msg.user === 'Player 1') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-send\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1299,\n                        columnNumber: 56\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1294,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-text\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: \"Type a message...\",\n                      value: message,\n                      onChange: event => setMessage(event.target.value),\n                      onKeyPress: event => event.key === 'Enter' && sendMessage(event)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1303,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1302,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1293,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1286,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1285,\n              columnNumber: 25\n            }, this), \" \"]\n          }, void 0, true), currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1312,\n                columnNumber: 29\n              }, this), player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/card-back.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1314,\n                columnNumber: 33\n              }, this)), turn === 'Player 1' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1321,\n                columnNumber: 51\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1311,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1323,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: turn === 'Player 1' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: turn !== 'Player 2',\n                onClick: onCardDrawnHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1325,\n                columnNumber: 29\n              }, this), playedCardsPile && playedCardsPile.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                src: require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length - 1]}.png`).default\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1327,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button orange\",\n                disabled: player2Deck.length !== 2,\n                onClick: () => {\n                  setUnoButtonPressed(!isUnoButtonPressed);\n                  playUnoSound();\n                },\n                children: \"UNO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1331,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1324,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1336,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: turn === 'Player 1' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1338,\n                columnNumber: 29\n              }, this), player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: require(`../assets/cards-front/${item}.png`).default\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1340,\n                columnNumber: 33\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1337,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxWrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-box chat-box-player2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-head\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Chat Box\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1352,\n                    columnNumber: 37\n                  }, this), !isChatBoxHidden ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_down\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1354,\n                    columnNumber: 37\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    class: \"material-icons\",\n                    children: \"keyboard_arrow_up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1355,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1351,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"msg-insert\",\n                    children: messages.map(msg => {\n                      if (msg.user === 'Player 1') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-receive\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1361,\n                        columnNumber: 56\n                      }, this);\n                      if (msg.user === 'Player 2') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-send\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1363,\n                        columnNumber: 56\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1358,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-text\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: \"Type a message...\",\n                      value: message,\n                      onChange: event => setMessage(event.target.value),\n                      onKeyPress: event => event.key === 'Enter' && sendMessage(event)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1367,\n                      columnNumber: 41\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1366,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1357,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1350,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1349,\n              columnNumber: 25\n            }, this), \" \"]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1244,\n          columnNumber: 21\n        }, this)\n      }, void 0, false)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Room full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1374,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1376,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button red\",\n        children: \"QUIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1377,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1377,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1219,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"/60W0wwBIN/LlT1M2scsZwHP4t4=\", false, function () {\n  return [useSound, useSound, useSound, useSound, useSound, useSound, useSound, useSound];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/allan/Desktop/uno-online/client/src/components/Game.js"],"names":["React","useEffect","useState","PACK_OF_CARDS","shuffleArray","io","queryString","Spinner","useSound","bgMusic","unoSound","shufflingSound","skipCardSound","draw2CardSound","wildCardSound","draw4CardSound","gameOverSound","socket","ENDPOINT","Game","props","data","parse","location","search","room","setRoom","roomCode","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","connectionOptions","connect","emit","error","cleanup","off","gameOver","setGameOver","winner","setWinner","turn","setTurn","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","currentColor","setCurrentColor","currentNumber","setCurrentNumber","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","isSoundMuted","setSoundMuted","isMusicMuted","setMusicMuted","playBBgMusic","pause","loop","playUnoSound","playShufflingSound","playSkipCardSound","playDraw2CardSound","playWildCardSound","playDraw4CardSound","playGameOverSound","shuffledCards","splice","startingCardIndex","Math","floor","random","charAt","on","name","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","length","checkWinner","player","toggleChatBox","style","display","sendMessage","event","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","console","log","removeIndex","indexOf","alert","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","slice","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","cardDrawnBy","drawCard","colorOfDrawnCard","numberOfDrawnCard","require","default","pointerEvents","map","item","i","msg","user","text","target","value","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport PACK_OF_CARDS from '../utils/packOfCards'\r\nimport shuffleArray from '../utils/shuffleArray'\r\nimport io from 'socket.io-client'\r\nimport queryString from 'query-string'\r\nimport Spinner from './Spinner'\r\nimport useSound from 'use-sound'\r\n\r\nimport bgMusic from '../assets/sounds/game-bg-music.mp3'\r\nimport unoSound from '../assets/sounds/uno-sound.mp3'\r\nimport shufflingSound from '../assets/sounds/shuffling-cards-1.mp3'\r\nimport skipCardSound from '../assets/sounds/skip-sound.mp3'\r\nimport draw2CardSound from '../assets/sounds/draw2-sound.mp3'\r\nimport wildCardSound from '../assets/sounds/wild-sound.mp3'\r\nimport draw4CardSound from '../assets/sounds/draw4-sound.mp3'\r\nimport gameOverSound from '../assets/sounds/game-over-sound.mp3'\r\n\r\n//NUMBER CODES FOR ACTION CARDS\r\n//SKIP - 404\r\n//DRAW 2 - 252\r\n//WILD - 300\r\n//DRAW 4 WILD - 600\r\n\r\nlet socket\r\n// const ENDPOINT = 'http://localhost:5000'\r\nconst ENDPOINT = 'http://localhost:5000'\r\n\r\nconst Game = (props) => {\r\n    const data = queryString.parse(props.location.search)\r\n\r\n    //initialize socket state\r\n    const [room, setRoom] = useState(data.roomCode)\r\n    const [roomFull, setRoomFull] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\", \r\n            \"timeout\" : 10000,                  \r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        //cleanup on component unmount\r\n        return function cleanup() {\r\n            socket.emit('disconnect')\r\n            //shut down connnection instance\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n    //initialize game state\r\n    const [gameOver, setGameOver] = useState(true)\r\n    const [winner, setWinner] = useState('')\r\n    const [turn, setTurn] = useState('')\r\n    const [player1Deck, setPlayer1Deck] = useState([])\r\n    const [player2Deck, setPlayer2Deck] = useState([])\r\n    const [currentColor, setCurrentColor] = useState('')\r\n    const [currentNumber, setCurrentNumber] = useState('')\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([])\r\n    const [drawCardPile, setDrawCardPile] = useState([])\r\n\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true)\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false)\r\n    const [isSoundMuted, setSoundMuted] = useState(false)\r\n    const [isMusicMuted, setMusicMuted] = useState(true)\r\n\r\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true })\r\n    const [playUnoSound] = useSound(unoSound)\r\n    const [playShufflingSound] = useSound(shufflingSound)\r\n    const [playSkipCardSound] = useSound(skipCardSound)\r\n    const [playDraw2CardSound] = useSound(draw2CardSound)\r\n    const [playWildCardSound] = useSound(wildCardSound)\r\n    const [playDraw4CardSound] = useSound(draw4CardSound)\r\n    const [playGameOverSound] = useSound(gameOverSound)\r\n\r\n    //runs once on component mount\r\n    useEffect(() => {\r\n        //shuffle PACK_OF_CARDS array\r\n        const shuffledCards = shuffleArray(PACK_OF_CARDS)\r\n\r\n        //extract first 7 elements to player1Deck\r\n        const player1Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract first 7 elements to player2Deck\r\n        const player2Deck = shuffledCards.splice(0, 7)\r\n\r\n        //extract random card from shuffledCards and check if its not an action card\r\n        let startingCardIndex\r\n        while(true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94)\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\r\n            shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\r\n            shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\r\n            shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\r\n            shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n\r\n        //extract the card from that startingCardIndex into the playedCardsPile\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1)\r\n\r\n        //store all remaining cards into drawCardPile\r\n        const drawCardPile = shuffledCards\r\n\r\n        //send initial state to server\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile]\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            gameOver && setGameOver(gameOver)\r\n            gameOver===true && playGameOverSound()\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [])\r\n\r\n    //some util functions\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1\r\n    }\r\n    \r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : ''\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body')\r\n        if(isChatBoxHidden) {\r\n            chatBody.style.display = 'block'\r\n            setChatBoxHidden(false)\r\n        }\r\n        else {\r\n            chatBody.style.display = 'none'\r\n            setChatBoxHidden(true)\r\n        }\r\n    }\r\n\r\n    const sendMessage= (event) => {\r\n        event.preventDefault()\r\n        if(message) {\r\n            socket.emit('sendMessage', { message: message }, () => {\r\n                setMessage('')\r\n            })\r\n        }\r\n    }\r\n\r\n    //driver functions\r\n    const onCardPlayedHandler = (played_card) => {\r\n        //extract player who played the card\r\n        const cardPlayedBy = turn\r\n        switch(played_card) {\r\n            //if card played was a number card\r\n            case '0R': case '1R': case '2R': case '3R': case '4R': case '5R': case '6R': case '7R': case '8R': case '9R': case '_R': case '0G': case '1G': case '2G': case '3G': case '4G': case '5G': case '6G': case '7G': case '8G': case '9G': case '_G': case '0B': case '1B': case '2B': case '3B': case '4B': case '5B': case '6B': case '7B': case '8B': case '9B': case '_B': case '0Y': case '1Y': case '2Y': case '3Y': case '4Y': case '5Y': case '6Y': case '7Y': case '8Y': case '9Y': case '_Y': {\r\n                //extract number and color of played card\r\n                const numberOfPlayedCard = played_card.charAt(0)\r\n                const colorOfPlayedCard = played_card.charAt(1)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match\r\n                else if(currentNumber === numberOfPlayedCard) {\r\n                    console.log('numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                turn: 'Player 2',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update turn, currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playShufflingSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                turn: 'Player 1',\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: numberOfPlayedCard\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a skip card\r\n            case 'skipR': case 'skipG': case 'skipB': case 'skipY': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(4)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if skip card played on skip card\r\n                else if(currentNumber === 404) {\r\n                    console.log('Numbers matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1)\r\n                            updatedPlayer1Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //make a copy of drawCardPile array\r\n                            const copiedDrawCardPileArray = [...drawCardPile]\r\n                            //pull out last two elements from it\r\n                            const drawCard1 = copiedDrawCardPileArray.pop()\r\n                            const drawCard2 = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1)\r\n                            updatedPlayer2Deck.push(drawCard2)\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playSkipCardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 2'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 404\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw 2 card\r\n            case 'D2R': case 'D2G': case 'D2B': case 'D2Y': {\r\n                //extract color of played skip card\r\n                const colorOfPlayedCard = played_card.charAt(2)\r\n                //check for color match\r\n                if(currentColor === colorOfPlayedCard) {\r\n                    console.log('colors matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //check for number match - if draw 2 card played on draw 2 card\r\n                else if(currentNumber === 252) {                        \r\n                    console.log('number matched!')\r\n                    //check who played the card and return new state accordingly\r\n                    if(cardPlayedBy === 'Player 1') {\r\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player1Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer1Deck.push(drawCard1X)\r\n                            updatedPlayer1Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...updatedPlayer1Deck],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player1Deck),\r\n                                winner: checkWinner(player1Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                                player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                        //then update currentColor and currentNumber - turn will remain same\r\n                        const removeIndex = player2Deck.indexOf(played_card)\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        //if two cards remaining check if player pressed UNO button\r\n                        //if not pressed add 2 cards as penalty\r\n                        if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                            alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                            //pull out last two elements from drawCardPile\r\n                            const drawCard1X = copiedDrawCardPileArray.pop()\r\n                            const drawCard2X = copiedDrawCardPileArray.pop()\r\n                            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                            updatedPlayer2Deck.push(drawCard1X)\r\n                            updatedPlayer2Deck.push(drawCard2X)\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...updatedPlayer2Deck],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                        else {\r\n                            !isSoundMuted && playDraw2CardSound()\r\n                            //send new state to server\r\n                            socket.emit('updateGameState', {\r\n                                gameOver: checkGameOver(player2Deck),\r\n                                winner: checkWinner(player2Deck, 'Player 1'),\r\n                                playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                                player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                                player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                                currentColor: colorOfPlayedCard,\r\n                                currentNumber: 252,\r\n                                drawCardPile: [...copiedDrawCardPileArray]\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                //if no color or number match, invalid move - do not update state\r\n                else {\r\n                    alert('Invalid Move!')\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a wild card\r\n            case 'W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1)\r\n                        updatedPlayer1Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //then update turn, currentColor and currentNumber\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //make a copy of drawCardPile array\r\n                        const copiedDrawCardPileArray = [...drawCardPile]\r\n                        //pull out last two elements from it\r\n                        const drawCard1 = copiedDrawCardPileArray.pop()\r\n                        const drawCard2 = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1)\r\n                        updatedPlayer2Deck.push(drawCard2)\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playWildCardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 300\r\n                        })\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            //if card played was a draw four wild card\r\n            case 'D4W': {\r\n                //check who played the card and return new state accordingly\r\n                if(cardPlayedBy === 'Player 1') {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player1Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player1Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer1Deck.push(drawCard1X)\r\n                        updatedPlayer1Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    //ask for new color\r\n                    const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\r\n                    const removeIndex = player2Deck.indexOf(played_card)\r\n                    //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                    //make a copy of drawCardPile array\r\n                    const copiedDrawCardPileArray = [...drawCardPile]\r\n                    //pull out last four elements from it\r\n                    const drawCard1 = copiedDrawCardPileArray.pop()\r\n                    const drawCard2 = copiedDrawCardPileArray.pop()\r\n                    const drawCard3 = copiedDrawCardPileArray.pop()\r\n                    const drawCard4 = copiedDrawCardPileArray.pop()\r\n                    //then update currentColor and currentNumber - turn will remain same\r\n                    !isSoundMuted && playDraw4CardSound()\r\n                    //send new state to server\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    })\r\n                    //if two cards remaining check if player pressed UNO button\r\n                    //if not pressed add 2 cards as penalty\r\n                    if(player2Deck.length===2 && !isUnoButtonPressed) {\r\n                        alert('Oops! You forgot to press UNO. You drew 2 cards as penalty.')\r\n                        //pull out last two elements from drawCardPile\r\n                        const drawCard1X = copiedDrawCardPileArray.pop()\r\n                        const drawCard2X = copiedDrawCardPileArray.pop()\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)]\r\n                        updatedPlayer2Deck.push(drawCard1X)\r\n                        updatedPlayer2Deck.push(drawCard2X)\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                    else {\r\n                        !isSoundMuted && playDraw4CardSound()\r\n                        //send new state to server\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: newColor,\r\n                            currentNumber: 600,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    \r\n    const onCardDrawnHandler = () => {\r\n        //extract player who drew the card\r\n        const cardDrawnBy = turn\r\n        //check who drew the card and return new state accordingly\r\n        if(cardDrawnBy === 'Player 1') {\r\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player1's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\r\n            //make a copy of drawCardPile array\r\n            const copiedDrawCardPileArray = [...drawCardPile]\r\n            //pull out last element from it\r\n            const drawCard = copiedDrawCardPileArray.pop()\r\n            //extract number and color of drawn card\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1)\r\n            let numberOfDrawnCard = drawCard.charAt(0)\r\n            if(colorOfDrawnCard === currentColor && (drawCard === 'skipR' || drawCard === 'skipG' || drawCard === 'skipB' || drawCard === 'skipY')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && (drawCard === 'D2R' || drawCard === 'D2G' || drawCard === 'D2B' || drawCard === 'D2Y')) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last two elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw2CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                !isSoundMuted && playWildCardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            else if(drawCard === 'D4W') {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                //ask for new color\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase()\r\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\r\n                //make a copy of drawCardPile array\r\n                const copiedDrawCardPileArray = [...drawCardPile]\r\n                //pull out last four elements from it\r\n                const drawCard1 = copiedDrawCardPileArray.pop()\r\n                const drawCard2 = copiedDrawCardPileArray.pop()\r\n                const drawCard3 = copiedDrawCardPileArray.pop()\r\n                const drawCard4 = copiedDrawCardPileArray.pop()\r\n                !isSoundMuted && playDraw4CardSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //if not action card - check if drawn card is playable\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\r\n                alert(`You drew ${drawCard}. It was played for you.`)\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n            //else add the drawn card to player2's deck\r\n            else {\r\n                !isSoundMuted && playShufflingSound()\r\n                //send new state to server\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img src={require('../assets/logo.png').default} />\r\n                    <h1>Game Code: {room}</h1>\r\n                    <span>\r\n                        <button className='game-button green' onClick={() => setSoundMuted(!isSoundMuted)}>{isSoundMuted ? <span className=\"material-icons\">volume_off</span> : <span className=\"material-icons\">volume_up</span>}</button>\r\n                        <button className='game-button green' onClick={() => {\r\n                            if(isMusicMuted)\r\n                                playBBgMusic()\r\n                            else\r\n                                pause()\r\n                            setMusicMuted(!isMusicMuted)\r\n                        }}>{isMusicMuted ? <span className=\"material-icons\">music_off</span> : <span className=\"material-icons\">music_note</span>}</button>\r\n                    </span>\r\n                </div>\r\n\r\n                {/* PLAYER LEFT MESSAGES */}\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}</div> :\r\n                    <div>\r\n                        {/* PLAYER 1 VIEW */}\r\n                        {currentUser === 'Player 1' && <>    \r\n                        <div className='player2Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 2' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player1\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n\r\n                        {/* PLAYER 2 VIEW */}\r\n                        {currentUser === 'Player 2' && <>\r\n                        <div className='player1Deck' style={{pointerEvents: 'none'}}>\r\n                            <p className='playerDeckText'>Player 1</p>\r\n                            {player1Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/card-back.png`).default}\r\n                                    />\r\n                            ))}\r\n                            {turn==='Player 1' && <Spinner />}\r\n                        </div>\r\n                        <br />\r\n                        <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                            {playedCardsPile && playedCardsPile.length>0 &&\r\n                            <img\r\n                                className='Card'\r\n                                src={require(`../assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`).default}\r\n                                /> }\r\n                            <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\r\n                                setUnoButtonPressed(!isUnoButtonPressed)\r\n                                playUnoSound()\r\n                            }}>UNO</button>\r\n                        </div>\r\n                        <br />\r\n                        <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                            <p className='playerDeckText'>Player 2</p>\r\n                            {player2Deck.map((item, i) => (\r\n                                <img\r\n                                    key={i}\r\n                                    className='Card'\r\n                                    onClick={() => onCardPlayedHandler(item)}\r\n                                    src={require(`../assets/cards-front/${item}.png`).default}\r\n                                    />\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"chatBoxWrapper\">\r\n                            <div className=\"chat-box chat-box-player2\">\r\n                                <div className=\"chat-head\">\r\n                                    <h2>Chat Box</h2>\r\n                                    {!isChatBoxHidden ?\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_down</span> :\r\n                                    <span onClick={toggleChatBox} class=\"material-icons\">keyboard_arrow_up</span>}\r\n                                </div>\r\n                                <div className=\"chat-body\">\r\n                                    <div className=\"msg-insert\">\r\n                                        {messages.map(msg => {\r\n                                            if(msg.user === 'Player 1')\r\n                                                return <div className=\"msg-receive\">{msg.text}</div>\r\n                                            if(msg.user === 'Player 2')\r\n                                                return <div className=\"msg-send\">{msg.text}</div>\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"chat-text\">\r\n                                        <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> </> }\r\n                    </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <a href='/'><button className=\"game-button red\">QUIT</button></a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}